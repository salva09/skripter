/* The following code was generated by JFlex 1.4.1 on 11/28/20, 1:15 AM */

/*
 * Generated on 11/28/20, 1:15 AM
 */
package me.salva.syntax;

import java.io.*;
import javax.swing.text.Segment;

import org.fife.ui.rsyntaxtextarea.*;


/**
 * 
 */

public class KotlinSyntax extends AbstractJFlexTokenMaker {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int EOL_COMMENT = 2;
  public static final int YYINITIAL = 0;
  public static final int MLC = 1;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\21\1\10\1\0\1\21\1\17\22\0\1\21\1\37\1\15"+
    "\1\20\1\1\1\37\1\37\1\7\2\40\1\23\1\27\1\37\1\27"+
    "\1\25\1\22\1\4\3\16\4\6\2\3\1\44\1\37\1\65\1\66"+
    "\1\65\1\37\1\20\1\5\1\57\1\60\2\5\1\61\2\1\1\62"+
    "\11\1\1\63\1\1\1\64\5\1\1\40\1\11\1\40\1\17\1\2"+
    "\1\0\1\33\1\14\1\47\1\51\1\26\1\32\1\53\1\41\1\43"+
    "\1\54\1\46\1\34\1\52\1\13\1\50\1\42\1\1\1\31\1\35"+
    "\1\30\1\12\1\55\1\45\1\24\1\56\1\1\1\36\1\17\1\36"+
    "\1\37\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\2\1\2\2\1\3\1\4\2\1\1\5\1\6"+
    "\2\7\7\1\1\10\16\1\1\7\1\11\1\12\5\11"+
    "\1\13\3\11\1\0\1\14\1\0\2\14\1\3\1\15"+
    "\1\0\1\3\2\1\2\5\1\16\1\17\1\20\1\21"+
    "\10\1\1\22\5\1\1\22\13\1\1\23\11\0\1\21"+
    "\1\0\1\24\1\3\1\25\2\3\1\15\1\3\2\1"+
    "\1\5\1\26\1\5\22\1\1\27\1\1\11\0\1\3"+
    "\1\1\1\5\1\30\12\1\2\0\1\31\2\0\1\32"+
    "\1\0\1\3\1\5\7\1\5\0\1\3\1\5\4\1";

  private static int [] zzUnpackAction() {
    int [] result = new int[186];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\67\0\156\0\245\0\334\0\u0113\0\u014a\0\u0181"+
    "\0\245\0\u01b8\0\u01ef\0\u0226\0\u025d\0\u0294\0\245\0\u02cb"+
    "\0\u0302\0\u0339\0\u0370\0\u03a7\0\u03de\0\u0415\0\245\0\u044c"+
    "\0\u0483\0\u04ba\0\u04f1\0\u0528\0\u055f\0\u0596\0\u05cd\0\u0604"+
    "\0\u063b\0\u0672\0\u06a9\0\u06e0\0\u0717\0\u074e\0\u0785\0\245"+
    "\0\u07bc\0\u07f3\0\u082a\0\u0861\0\u0898\0\245\0\u08cf\0\u0906"+
    "\0\u093d\0\u0974\0\u09ab\0\u02cb\0\u09e2\0\u0a19\0\u0a50\0\245"+
    "\0\u0a87\0\u0abe\0\u0af5\0\u0b2c\0\u0b63\0\u0b9a\0\245\0\245"+
    "\0\245\0\u0bd1\0\u0c08\0\u0c3f\0\u0c76\0\u0cad\0\u0ce4\0\u0d1b"+
    "\0\u0d52\0\u0d89\0\334\0\u0dc0\0\u0df7\0\u0e2e\0\u0e65\0\u0e9c"+
    "\0\u0ed3\0\u0f0a\0\u0f41\0\u0f78\0\u0faf\0\u0fe6\0\u101d\0\u1054"+
    "\0\u108b\0\u10c2\0\u10f9\0\u1130\0\245\0\u1167\0\u119e\0\u11d5"+
    "\0\u120c\0\u1243\0\u127a\0\u12b1\0\u12e8\0\u131f\0\u1356\0\u138d"+
    "\0\u0a19\0\u13c4\0\245\0\u13fb\0\u1432\0\u0a87\0\u1469\0\u14a0"+
    "\0\u14d7\0\u150e\0\245\0\u1545\0\u157c\0\u15b3\0\u15ea\0\u1621"+
    "\0\u1658\0\u168f\0\u16c6\0\u16fd\0\u1734\0\u176b\0\u17a2\0\u17d9"+
    "\0\u1810\0\u1847\0\u187e\0\u18b5\0\u18ec\0\u1923\0\334\0\u195a"+
    "\0\u1991\0\u19c8\0\u19ff\0\u1a36\0\u1a6d\0\u1aa4\0\u1adb\0\u1b12"+
    "\0\u1b49\0\u1b80\0\u1bb7\0\u1bee\0\334\0\u1c25\0\u1c5c\0\u1c93"+
    "\0\u1cca\0\u1d01\0\u1d38\0\u1d6f\0\u1da6\0\u1ddd\0\u1e14\0\u1e4b"+
    "\0\u1e82\0\u1eb9\0\u1ef0\0\u1f27\0\u1f5e\0\u1f95\0\u1fcc\0\u2003"+
    "\0\u203a\0\u2071\0\u20a8\0\u20df\0\u2116\0\u214d\0\u2184\0\u21bb"+
    "\0\u1eb9\0\u21f2\0\u1f5e\0\u2229\0\u2260\0\u2297\0\u22ce\0\u2305"+
    "\0\u233c\0\u2373";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[186];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\2\5\1\6\1\7\1\5\1\6\1\10\1\11"+
    "\1\4\1\5\1\12\1\13\1\14\1\6\2\4\1\15"+
    "\1\16\1\17\1\5\1\20\1\21\1\17\1\22\1\23"+
    "\1\24\1\25\1\5\1\26\1\27\1\4\1\27\1\5"+
    "\1\30\1\31\1\4\1\32\1\5\1\33\1\34\1\35"+
    "\1\5\1\36\1\5\1\37\1\5\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\4\10\47\1\50\12\47"+
    "\1\51\6\47\1\52\6\47\1\53\3\47\1\54\21\47"+
    "\10\55\1\56\21\55\1\57\6\55\1\60\3\55\1\61"+
    "\21\55\70\0\6\5\2\0\1\62\3\5\1\0\1\5"+
    "\5\0\1\5\1\0\1\5\1\0\6\5\3\0\3\5"+
    "\1\0\20\5\2\0\3\63\2\6\1\63\1\6\2\0"+
    "\4\63\1\0\1\6\1\0\1\63\3\0\1\63\1\64"+
    "\1\65\1\0\6\63\3\0\3\63\1\0\20\63\2\0"+
    "\3\63\2\6\1\63\1\6\2\0\4\63\1\0\1\6"+
    "\1\0\1\63\3\0\1\66\1\64\1\65\1\0\6\63"+
    "\3\0\3\63\1\0\20\63\2\0\7\67\1\70\1\71"+
    "\1\72\55\67\1\0\6\5\2\0\1\62\1\73\2\5"+
    "\1\0\1\5\5\0\1\5\1\0\1\5\1\0\6\5"+
    "\3\0\3\5\1\0\20\5\3\0\6\5\2\0\1\62"+
    "\3\5\1\0\1\5\5\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\74\4\5\3\0\3\5\1\0\20\5\2\0"+
    "\10\14\1\75\1\76\3\14\1\77\51\14\21\0\1\15"+
    "\67\0\1\100\1\101\46\0\2\102\1\0\1\102\7\0"+
    "\1\102\51\0\6\5\2\0\1\62\1\5\1\103\1\5"+
    "\1\0\1\5\5\0\1\5\1\0\1\5\1\0\4\5"+
    "\1\104\1\5\3\0\3\5\1\0\20\5\3\0\6\5"+
    "\2\0\1\62\3\5\1\0\1\5\5\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\105\4\5\3\0\1\106\2\5"+
    "\1\0\20\5\3\0\6\5\2\0\1\62\3\5\1\0"+
    "\1\5\5\0\1\5\1\0\1\107\1\0\6\5\3\0"+
    "\3\5\1\0\20\5\3\0\6\5\2\0\1\62\1\110"+
    "\2\5\1\0\1\5\5\0\1\5\1\0\1\5\1\0"+
    "\3\5\1\111\2\5\3\0\3\5\1\0\3\5\1\112"+
    "\14\5\3\0\6\5\2\0\1\62\3\5\1\0\1\5"+
    "\5\0\1\5\1\0\1\5\1\0\5\5\1\113\3\0"+
    "\3\5\1\0\20\5\3\0\6\5\2\0\1\62\1\114"+
    "\2\5\1\0\1\5\5\0\1\5\1\0\1\115\1\0"+
    "\6\5\3\0\3\5\1\0\20\5\3\0\6\5\2\0"+
    "\1\62\1\116\2\5\1\0\1\5\5\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\117\1\5\1\120\2\5\3\0"+
    "\3\5\1\0\20\5\3\0\6\5\2\0\1\62\1\5"+
    "\1\121\1\5\1\0\1\5\5\0\1\5\1\0\1\5"+
    "\1\0\2\5\1\113\2\5\1\113\3\0\3\5\1\0"+
    "\20\5\3\0\6\5\2\0\1\62\3\5\1\0\1\5"+
    "\5\0\1\5\1\0\1\5\1\0\6\5\3\0\1\122"+
    "\2\5\1\0\20\5\3\0\6\5\2\0\1\62\3\5"+
    "\1\0\1\5\5\0\1\5\1\0\1\5\1\0\4\5"+
    "\1\123\1\5\3\0\3\5\1\0\3\5\1\124\14\5"+
    "\3\0\6\5\2\0\1\62\2\5\1\125\1\0\1\5"+
    "\5\0\1\5\1\0\1\5\1\0\6\5\3\0\3\5"+
    "\1\0\20\5\3\0\6\5\2\0\1\62\3\5\1\0"+
    "\1\5\5\0\1\5\1\0\1\5\1\0\6\5\3\0"+
    "\3\5\1\0\3\5\1\113\14\5\3\0\6\5\2\0"+
    "\1\62\3\5\1\0\1\5\5\0\1\5\1\0\1\115"+
    "\1\0\6\5\3\0\3\5\1\0\20\5\3\0\6\5"+
    "\2\0\1\62\3\5\1\0\1\5\5\0\1\5\1\0"+
    "\1\5\1\0\3\5\1\126\2\5\3\0\3\5\1\0"+
    "\20\5\3\0\6\5\2\0\1\62\3\5\1\0\1\5"+
    "\5\0\1\5\1\0\1\5\1\0\6\5\3\0\3\5"+
    "\1\0\3\5\1\127\14\5\3\0\6\5\2\0\1\62"+
    "\3\5\1\0\1\5\5\0\1\5\1\0\1\5\1\0"+
    "\6\5\3\0\1\130\2\5\1\0\20\5\3\0\6\5"+
    "\2\0\1\62\3\5\1\0\1\5\5\0\1\5\1\0"+
    "\1\5\1\0\4\5\1\131\1\5\3\0\3\5\1\0"+
    "\20\5\3\0\6\5\2\0\1\62\1\5\1\132\1\5"+
    "\1\0\1\5\5\0\1\5\1\0\1\5\1\0\6\5"+
    "\3\0\3\5\1\0\20\5\3\0\6\5\2\0\1\62"+
    "\3\5\1\0\1\5\5\0\1\5\1\0\1\5\1\0"+
    "\1\133\5\5\3\0\3\5\1\0\20\5\3\0\6\5"+
    "\2\0\1\62\1\5\1\134\1\5\1\0\1\5\5\0"+
    "\1\5\1\0\1\5\1\0\6\5\3\0\3\5\1\0"+
    "\20\5\70\0\1\17\10\47\1\0\12\47\1\0\6\47"+
    "\1\0\6\47\1\0\3\47\1\0\21\47\22\0\1\135"+
    "\74\0\1\136\12\0\1\137\53\0\1\140\103\0\1\141"+
    "\21\0\10\55\1\0\21\55\1\0\6\55\1\0\3\55"+
    "\1\0\21\55\30\0\1\142\12\0\1\143\53\0\1\144"+
    "\103\0\1\145\33\0\1\146\54\0\7\63\2\0\4\63"+
    "\1\0\1\63\1\0\1\63\3\0\1\63\1\0\1\63"+
    "\1\0\6\63\3\0\3\63\1\0\20\63\2\0\3\63"+
    "\2\147\1\63\1\147\2\0\4\63\1\0\1\147\1\0"+
    "\1\63\3\0\1\63\1\0\1\63\1\150\6\63\3\0"+
    "\3\63\1\0\20\63\2\0\3\63\4\151\2\0\3\63"+
    "\1\151\1\0\1\151\1\0\1\63\3\0\1\63\1\0"+
    "\1\151\1\0\2\63\2\151\2\63\3\0\3\63\1\0"+
    "\2\63\1\151\1\63\1\151\5\63\3\151\3\63\2\0"+
    "\7\152\1\153\1\0\56\152\7\0\1\153\57\0\4\152"+
    "\1\154\1\152\1\155\1\156\1\0\1\67\1\157\3\67"+
    "\1\154\11\152\3\67\34\152\1\0\6\5\2\0\1\62"+
    "\3\5\1\0\1\5\5\0\1\5\1\0\1\5\1\0"+
    "\4\5\1\160\1\5\3\0\3\5\1\0\20\5\3\0"+
    "\6\5\2\0\1\62\3\5\1\0\1\5\5\0\1\5"+
    "\1\0\1\161\1\0\6\5\3\0\3\5\1\0\20\5"+
    "\2\0\11\75\1\162\3\75\1\163\55\75\1\14\1\75"+
    "\2\14\1\0\1\14\1\164\4\14\11\75\3\14\34\75"+
    "\3\63\2\102\1\63\1\102\2\0\4\63\1\0\1\102"+
    "\1\0\1\63\3\0\1\63\1\0\1\65\1\0\6\63"+
    "\3\0\3\63\1\0\20\63\3\0\6\5\2\0\1\62"+
    "\1\165\2\5\1\0\1\5\5\0\1\5\1\0\1\5"+
    "\1\0\6\5\3\0\3\5\1\0\20\5\3\0\6\5"+
    "\2\0\1\62\3\5\1\0\1\5\5\0\1\5\1\0"+
    "\1\5\1\0\5\5\1\166\3\0\3\5\1\0\20\5"+
    "\3\0\6\5\2\0\1\62\1\167\2\5\1\0\1\5"+
    "\5\0\1\5\1\0\1\5\1\0\6\5\3\0\3\5"+
    "\1\0\11\5\1\113\6\5\3\0\6\5\2\0\1\62"+
    "\3\5\1\0\1\5\5\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\170\4\5\3\0\2\5\1\25\1\0\20\5"+
    "\3\0\6\5\2\0\1\62\3\5\1\0\1\5\5\0"+
    "\1\5\1\0\1\5\1\0\1\171\5\5\3\0\3\5"+
    "\1\0\20\5\3\0\6\5\2\0\1\62\1\5\1\113"+
    "\1\5\1\0\1\5\5\0\1\5\1\0\1\5\1\0"+
    "\6\5\3\0\3\5\1\0\20\5\3\0\6\5\2\0"+
    "\1\62\3\5\1\0\1\5\5\0\1\5\1\0\1\5"+
    "\1\0\4\5\1\172\1\5\3\0\3\5\1\0\20\5"+
    "\3\0\6\5\2\0\1\62\3\5\1\0\1\5\5\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\113\4\5\3\0"+
    "\3\5\1\0\20\5\3\0\6\5\2\0\1\62\3\5"+
    "\1\0\1\5\5\0\1\5\1\0\1\5\1\0\6\5"+
    "\3\0\1\5\1\173\1\5\1\0\20\5\3\0\6\5"+
    "\2\0\1\62\3\5\1\0\1\5\5\0\1\5\1\0"+
    "\1\5\1\0\1\113\5\5\3\0\3\5\1\0\20\5"+
    "\3\0\6\5\2\0\1\62\2\5\1\174\1\0\1\5"+
    "\5\0\1\5\1\0\1\5\1\0\6\5\3\0\3\5"+
    "\1\0\20\5\3\0\6\5\2\0\1\62\3\5\1\0"+
    "\1\5\5\0\1\5\1\0\1\5\1\0\6\5\3\0"+
    "\2\5\1\175\1\0\20\5\3\0\6\5\2\0\1\62"+
    "\3\5\1\0\1\5\5\0\1\5\1\0\1\5\1\0"+
    "\6\5\3\0\3\5\1\0\2\5\1\176\15\5\3\0"+
    "\6\5\2\0\1\62\3\5\1\0\1\5\5\0\1\5"+
    "\1\0\1\5\1\0\1\177\5\5\3\0\3\5\1\0"+
    "\20\5\3\0\6\5\2\0\1\62\3\5\1\0\1\5"+
    "\5\0\1\5\1\0\1\110\1\0\6\5\3\0\2\5"+
    "\1\200\1\0\20\5\3\0\6\5\2\0\1\62\3\5"+
    "\1\0\1\5\5\0\1\5\1\0\1\5\1\0\3\5"+
    "\1\201\2\5\3\0\3\5\1\0\20\5\3\0\6\5"+
    "\2\0\1\62\1\5\1\202\1\5\1\0\1\5\5\0"+
    "\1\5\1\0\1\5\1\0\6\5\3\0\3\5\1\0"+
    "\20\5\3\0\6\5\2\0\1\62\3\5\1\0\1\5"+
    "\5\0\1\5\1\0\1\5\1\0\6\5\3\0\3\5"+
    "\1\0\7\5\1\203\10\5\3\0\6\5\2\0\1\62"+
    "\3\5\1\0\1\5\5\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\113\2\5\1\113\1\5\3\0\3\5\1\0"+
    "\20\5\3\0\6\5\2\0\1\62\3\5\1\0\1\5"+
    "\5\0\1\5\1\0\1\5\1\0\6\5\3\0\3\5"+
    "\1\0\3\5\1\204\14\5\3\0\6\5\2\0\1\62"+
    "\3\5\1\0\1\5\5\0\1\5\1\0\1\5\1\0"+
    "\3\5\1\205\2\5\3\0\3\5\1\0\20\5\3\0"+
    "\6\5\2\0\1\62\3\5\1\0\1\5\5\0\1\5"+
    "\1\0\1\5\1\0\6\5\3\0\3\5\1\0\3\5"+
    "\1\206\14\5\3\0\6\5\2\0\1\62\3\5\1\0"+
    "\1\5\5\0\1\5\1\0\1\5\1\0\1\207\5\5"+
    "\3\0\3\5\1\0\20\5\3\0\6\5\2\0\1\62"+
    "\3\5\1\0\1\5\5\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\210\4\5\3\0\3\5\1\0\20\5\3\0"+
    "\6\5\2\0\1\62\3\5\1\0\1\5\5\0\1\5"+
    "\1\0\1\5\1\0\6\5\3\0\2\5\1\132\1\0"+
    "\20\5\44\0\1\211\60\0\1\212\62\0\1\213\103\0"+
    "\1\214\63\0\1\215\60\0\1\216\62\0\1\217\103\0"+
    "\1\220\24\0\4\221\5\0\1\221\1\0\1\221\7\0"+
    "\1\221\3\0\2\221\13\0\1\221\1\0\1\221\5\0"+
    "\3\221\5\0\3\63\2\147\1\63\1\147\2\0\4\63"+
    "\1\0\1\147\1\0\1\63\3\0\1\63\1\0\1\63"+
    "\1\0\6\63\3\0\3\63\1\0\20\63\5\0\2\147"+
    "\1\0\1\147\7\0\1\147\50\0\7\152\1\70\1\0"+
    "\62\152\1\155\1\152\1\155\1\153\1\0\5\152\1\155"+
    "\54\152\1\67\1\152\1\67\1\153\1\0\5\152\1\67"+
    "\53\152\4\222\1\70\1\0\3\152\1\222\1\152\1\222"+
    "\7\152\1\222\3\152\2\222\13\152\1\222\1\152\1\222"+
    "\5\152\3\222\5\152\1\0\6\5\2\0\1\62\3\5"+
    "\1\0\1\5\5\0\1\5\1\0\1\5\1\0\4\5"+
    "\1\113\1\5\3\0\3\5\1\0\20\5\3\0\6\5"+
    "\2\0\1\62\3\5\1\0\1\5\5\0\1\5\1\0"+
    "\1\5\1\0\3\5\1\223\2\5\3\0\3\5\1\0"+
    "\20\5\2\0\10\75\1\0\61\75\4\224\2\75\1\162"+
    "\2\75\1\224\1\163\1\224\7\75\1\224\3\75\2\224"+
    "\13\75\1\224\1\75\1\224\5\75\3\224\5\75\1\0"+
    "\6\5\2\0\1\62\3\5\1\0\1\5\5\0\1\5"+
    "\1\0\1\5\1\0\6\5\3\0\3\5\1\0\5\5"+
    "\1\113\12\5\3\0\6\5\2\0\1\62\3\5\1\0"+
    "\1\5\5\0\1\5\1\0\1\113\1\0\6\5\3\0"+
    "\3\5\1\0\20\5\3\0\6\5\2\0\1\62\3\5"+
    "\1\0\1\5\5\0\1\5\1\0\1\225\1\0\6\5"+
    "\3\0\3\5\1\0\20\5\3\0\6\5\2\0\1\62"+
    "\3\5\1\0\1\5\5\0\1\5\1\0\1\5\1\0"+
    "\6\5\3\0\3\5\1\0\3\5\1\226\14\5\3\0"+
    "\6\5\2\0\1\62\1\227\2\5\1\0\1\5\5\0"+
    "\1\5\1\0\1\5\1\0\6\5\3\0\3\5\1\0"+
    "\20\5\3\0\6\5\2\0\1\62\3\5\1\0\1\5"+
    "\5\0\1\5\1\0\1\5\1\0\5\5\1\167\3\0"+
    "\3\5\1\0\20\5\3\0\6\5\2\0\1\62\3\5"+
    "\1\0\1\5\5\0\1\5\1\0\1\112\1\0\6\5"+
    "\3\0\3\5\1\0\20\5\3\0\6\5\2\0\1\62"+
    "\3\5\1\0\1\5\5\0\1\5\1\0\1\5\1\0"+
    "\4\5\1\230\1\5\3\0\3\5\1\0\20\5\3\0"+
    "\6\5\2\0\1\62\3\5\1\0\1\5\5\0\1\5"+
    "\1\0\1\5\1\0\6\5\3\0\3\5\1\0\10\5"+
    "\1\231\7\5\3\0\6\5\2\0\1\62\3\5\1\0"+
    "\1\5\5\0\1\5\1\0\1\5\1\0\6\5\3\0"+
    "\3\5\1\0\1\5\1\232\16\5\3\0\6\5\2\0"+
    "\1\62\3\5\1\0\1\5\5\0\1\5\1\0\1\233"+
    "\1\0\6\5\3\0\3\5\1\0\20\5\3\0\6\5"+
    "\2\0\1\62\3\5\1\0\1\5\5\0\1\5\1\0"+
    "\1\5\1\0\4\5\1\166\1\5\3\0\3\5\1\0"+
    "\20\5\3\0\6\5\2\0\1\62\3\5\1\0\1\5"+
    "\5\0\1\5\1\0\1\5\1\0\5\5\1\25\3\0"+
    "\3\5\1\0\20\5\3\0\6\5\2\0\1\62\3\5"+
    "\1\0\1\5\5\0\1\5\1\0\1\5\1\0\1\234"+
    "\5\5\3\0\3\5\1\0\20\5\3\0\6\5\2\0"+
    "\1\62\3\5\1\0\1\5\5\0\1\5\1\0\1\235"+
    "\1\0\6\5\3\0\3\5\1\0\20\5\3\0\6\5"+
    "\2\0\1\62\3\5\1\0\1\5\5\0\1\5\1\0"+
    "\1\5\1\0\4\5\1\236\1\5\3\0\3\5\1\0"+
    "\20\5\3\0\6\5\2\0\1\62\3\5\1\0\1\5"+
    "\5\0\1\5\1\0\1\5\1\0\1\5\1\207\4\5"+
    "\3\0\3\5\1\0\20\5\3\0\6\5\2\0\1\62"+
    "\3\5\1\0\1\5\5\0\1\5\1\0\1\5\1\0"+
    "\3\5\1\132\2\5\3\0\3\5\1\0\20\5\3\0"+
    "\6\5\2\0\1\62\3\5\1\0\1\5\5\0\1\5"+
    "\1\0\1\5\1\0\6\5\3\0\2\5\1\237\1\0"+
    "\20\5\46\0\1\240\50\0\1\211\102\0\1\241\51\0"+
    "\1\242\105\0\1\243\50\0\1\215\102\0\1\244\51\0"+
    "\1\245\44\0\4\246\5\0\1\246\1\0\1\246\7\0"+
    "\1\246\3\0\2\246\13\0\1\246\1\0\1\246\5\0"+
    "\3\246\5\0\3\152\4\247\1\70\1\0\3\152\1\247"+
    "\1\152\1\247\7\152\1\247\3\152\2\247\13\152\1\247"+
    "\1\152\1\247\5\152\3\247\5\152\1\0\6\5\2\0"+
    "\1\62\3\5\1\0\1\5\5\0\1\5\1\0\1\5"+
    "\1\0\6\5\3\0\3\5\1\0\1\5\1\113\16\5"+
    "\2\0\3\75\4\250\2\75\1\162\2\75\1\250\1\163"+
    "\1\250\7\75\1\250\3\75\2\250\13\75\1\250\1\75"+
    "\1\250\5\75\3\250\5\75\1\0\6\5\2\0\1\62"+
    "\3\5\1\0\1\5\5\0\1\5\1\0\1\5\1\0"+
    "\6\5\3\0\3\5\1\0\1\113\17\5\3\0\6\5"+
    "\2\0\1\62\3\5\1\0\1\5\5\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\110\4\5\3\0\3\5\1\0"+
    "\20\5\3\0\6\5\2\0\1\62\3\5\1\0\1\5"+
    "\5\0\1\5\1\0\1\5\1\0\6\5\3\0\2\5"+
    "\1\251\1\0\20\5\3\0\6\5\2\0\1\62\3\5"+
    "\1\0\1\5\5\0\1\5\1\0\1\5\1\0\3\5"+
    "\1\252\2\5\3\0\3\5\1\0\20\5\3\0\6\5"+
    "\2\0\1\62\3\5\1\0\1\5\5\0\1\5\1\0"+
    "\1\5\1\0\3\5\1\253\2\5\3\0\3\5\1\0"+
    "\20\5\3\0\6\5\2\0\1\62\3\5\1\0\1\5"+
    "\5\0\1\5\1\0\1\5\1\0\1\5\1\254\4\5"+
    "\3\0\3\5\1\0\20\5\3\0\6\5\2\0\1\62"+
    "\3\5\1\0\1\5\5\0\1\5\1\0\1\5\1\0"+
    "\6\5\3\0\2\5\1\255\1\0\20\5\3\0\6\5"+
    "\2\0\1\62\3\5\1\0\1\5\5\0\1\5\1\0"+
    "\1\5\1\0\6\5\3\0\3\5\1\0\2\5\1\115"+
    "\15\5\3\0\6\5\2\0\1\62\3\5\1\0\1\5"+
    "\5\0\1\5\1\0\1\256\1\0\6\5\3\0\3\5"+
    "\1\0\20\5\3\0\6\5\2\0\1\62\1\5\1\257"+
    "\1\5\1\0\1\5\5\0\1\5\1\0\1\5\1\0"+
    "\6\5\3\0\3\5\1\0\20\5\24\0\1\260\101\0"+
    "\1\211\6\0\1\240\23\0\1\242\1\261\4\242\1\261"+
    "\2\0\3\242\1\0\1\242\1\0\1\261\1\0\1\242"+
    "\1\261\1\242\1\261\1\242\1\261\6\242\1\0\2\261"+
    "\3\242\1\261\20\242\1\0\1\261\22\0\1\262\101\0"+
    "\1\215\6\0\1\243\23\0\1\245\1\263\4\245\1\263"+
    "\2\0\3\245\1\0\1\245\1\0\1\263\1\0\1\245"+
    "\1\263\1\245\1\263\1\245\1\263\6\245\1\0\2\263"+
    "\3\245\1\263\20\245\1\0\1\263\3\0\4\264\5\0"+
    "\1\264\1\0\1\264\7\0\1\264\3\0\2\264\13\0"+
    "\1\264\1\0\1\264\5\0\3\264\5\0\3\152\4\265"+
    "\1\70\1\0\3\152\1\265\1\152\1\265\7\152\1\265"+
    "\3\152\2\265\13\152\1\265\1\152\1\265\5\152\3\265"+
    "\5\152\3\75\4\266\2\75\1\162\2\75\1\266\1\163"+
    "\1\266\7\75\1\266\3\75\2\266\13\75\1\266\1\75"+
    "\1\266\5\75\3\266\5\75\1\0\6\5\2\0\1\62"+
    "\3\5\1\0\1\5\5\0\1\5\1\0\1\5\1\0"+
    "\6\5\3\0\3\5\1\0\2\5\1\113\15\5\3\0"+
    "\6\5\2\0\1\62\3\5\1\0\1\5\5\0\1\5"+
    "\1\0\1\5\1\0\1\166\5\5\3\0\3\5\1\0"+
    "\20\5\3\0\6\5\2\0\1\62\3\5\1\0\1\5"+
    "\5\0\1\5\1\0\1\5\1\0\6\5\3\0\3\5"+
    "\1\0\6\5\1\166\11\5\3\0\6\5\2\0\1\62"+
    "\3\5\1\0\1\5\5\0\1\5\1\0\1\5\1\0"+
    "\2\5\1\267\3\5\3\0\3\5\1\0\20\5\3\0"+
    "\6\5\2\0\1\62\1\5\1\270\1\5\1\0\1\5"+
    "\5\0\1\5\1\0\1\5\1\0\6\5\3\0\3\5"+
    "\1\0\20\5\3\0\6\5\2\0\1\62\3\5\1\0"+
    "\1\5\5\0\1\5\1\0\1\5\1\0\3\5\1\271"+
    "\2\5\3\0\3\5\1\0\20\5\3\0\6\5\2\0"+
    "\1\62\3\5\1\0\1\5\5\0\1\5\1\0\1\5"+
    "\1\0\6\5\3\0\3\5\1\0\6\5\1\207\11\5"+
    "\24\0\1\242\66\0\1\245\47\0\4\5\5\0\1\5"+
    "\1\0\1\5\7\0\1\5\3\0\2\5\13\0\1\5"+
    "\1\0\1\5\5\0\3\5\5\0\3\152\4\67\1\70"+
    "\1\0\3\152\1\67\1\152\1\67\7\152\1\67\3\152"+
    "\2\67\13\152\1\67\1\152\1\67\5\152\3\67\5\152"+
    "\3\75\4\14\2\75\1\162\2\75\1\14\1\163\1\14"+
    "\7\75\1\14\3\75\2\14\13\75\1\14\1\75\1\14"+
    "\5\75\3\14\5\75\1\0\6\5\2\0\1\62\3\5"+
    "\1\0\1\5\5\0\1\5\1\0\1\5\1\0\3\5"+
    "\1\272\2\5\3\0\3\5\1\0\20\5\3\0\6\5"+
    "\2\0\1\62\1\166\2\5\1\0\1\5\5\0\1\5"+
    "\1\0\1\5\1\0\6\5\3\0\3\5\1\0\20\5"+
    "\3\0\6\5\2\0\1\62\1\5\1\207\1\5\1\0"+
    "\1\5\5\0\1\5\1\0\1\5\1\0\6\5\3\0"+
    "\3\5\1\0\20\5\3\0\6\5\2\0\1\62\3\5"+
    "\1\0\1\5\5\0\1\5\1\0\1\5\1\0\6\5"+
    "\3\0\3\5\1\0\2\5\1\166\15\5\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9130];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\4\1\1\11\5\1\1\11\7\1\1\11"+
    "\20\1\1\11\5\1\1\11\3\1\1\0\1\1\1\0"+
    "\3\1\1\11\1\0\5\1\3\11\33\1\1\11\11\0"+
    "\1\1\1\0\2\1\1\11\7\1\1\11\25\1\11\0"+
    "\16\1\2\0\1\1\2\0\1\1\1\0\11\1\5\0"+
    "\6\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[186];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */


	/**
	 * Constructor.  This must be here because JFlex does not generate a
	 * no-parameter constructor.
	 */
	public KotlinSyntax() {
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 * @see #addToken(int, int, int)
	 */
	private void addHyperlinkToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so, true);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 */
	private void addToken(int tokenType) {
		addToken(zzStartRead, zzMarkedPos-1, tokenType);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 * @see #addHyperlinkToken(int, int, int)
	 */
	private void addToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so, false);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param array The character array.
	 * @param start The starting offset in the array.
	 * @param end The ending offset in the array.
	 * @param tokenType The token's type.
	 * @param startOffset The offset in the document at which this token
	 *        occurs.
	 * @param hyperlink Whether this token is a hyperlink.
	 */
	public void addToken(char[] array, int start, int end, int tokenType,
						int startOffset, boolean hyperlink) {
		super.addToken(array, start,end, tokenType, startOffset, hyperlink);
		zzStartRead = zzMarkedPos;
	}


	/**
	 * {@inheritDoc}
	 */
	public String[] getLineCommentStartAndEnd(int languageIndex) {
		return new String[] { "//", null };
	}


	/**
	 * Returns the first token in the linked list of tokens generated
	 * from <code>text</code>.  This method must be implemented by
	 * subclasses so they can correctly implement syntax highlighting.
	 *
	 * @param text The text from which to get tokens.
	 * @param initialTokenType The token type we should start with.
	 * @param startOffset The offset into the document at which
	 *        <code>text</code> starts.
	 * @return The first <code>Token</code> in a linked list representing
	 *         the syntax highlighted text.
	 */
	public Token getTokenList(Segment text, int initialTokenType, int startOffset) {

		resetTokenList();
		this.offsetShift = -text.offset + startOffset;

		// Start off in the proper state.
		int state = Token.NULL;
		switch (initialTokenType) {
						case Token.COMMENT_MULTILINE:
				state = MLC;
				start = text.offset;
				break;

			/* No documentation comments */
			default:
				state = Token.NULL;
		}

		s = text;
		try {
			yyreset(zzReader);
			yybegin(state);
			return yylex();
		} catch (IOException ioe) {
			ioe.printStackTrace();
			return new TokenImpl();
		}

	}


	/**
	 * Refills the input buffer.
	 *
	 * @return      <code>true</code> if EOF was reached, otherwise
	 *              <code>false</code>.
	 */
	private boolean zzRefill() {
		return zzCurrentPos>=s.offset+s.count;
	}


	/**
	 * Resets the scanner to read from a new input stream.
	 * Does not close the old reader.
	 *
	 * All internal variables are reset, the old input stream 
	 * <b>cannot</b> be reused (internal buffer is discarded and lost).
	 * Lexical state is set to <tt>YY_INITIAL</tt>.
	 *
	 * @param reader   the new input stream 
	 */
	public final void yyreset(Reader reader) {
		// 's' has been updated.
		zzBuffer = s.array;
		/*
		 * We replaced the line below with the two below it because zzRefill
		 * no longer "refills" the buffer (since the way we do it, it's always
		 * "full" the first time through, since it points to the segment's
		 * array).  So, we assign zzEndRead here.
		 */
		//zzStartRead = zzEndRead = s.offset;
		zzStartRead = s.offset;
		zzEndRead = zzStartRead + s.count - 1;
		zzCurrentPos = zzMarkedPos = zzPushbackPos = s.offset;
		zzLexicalState = YYINITIAL;
		zzReader = reader;
		zzAtBOL  = true;
		zzAtEOF  = false;
	}




  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public KotlinSyntax(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public KotlinSyntax(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 164) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 4: 
          { addNullToken(); return firstToken;
          }
        case 27: break;
        case 21: 
          { addToken(Token.LITERAL_CHAR);
          }
        case 28: break;
        case 16: 
          { start = zzMarkedPos-2; yybegin(MLC);
          }
        case 29: break;
        case 6: 
          { addToken(Token.WHITESPACE);
          }
        case 30: break;
        case 20: 
          { addToken(Token.LITERAL_NUMBER_HEXADECIMAL);
          }
        case 31: break;
        case 22: 
          { addToken(Token.ERROR_STRING_DOUBLE);
          }
        case 32: break;
        case 17: 
          { addToken(Token.LITERAL_NUMBER_FLOAT);
          }
        case 33: break;
        case 18: 
          { addToken(Token.RESERVED_WORD);
          }
        case 34: break;
        case 8: 
          { addToken(Token.SEPARATOR);
          }
        case 35: break;
        case 1: 
          { addToken(Token.IDENTIFIER);
          }
        case 36: break;
        case 11: 
          { addToken(start,zzStartRead-1, Token.COMMENT_EOL); addNullToken(); return firstToken;
          }
        case 37: break;
        case 15: 
          { start = zzMarkedPos-2; yybegin(EOL_COMMENT);
          }
        case 38: break;
        case 3: 
          { addToken(Token.ERROR_CHAR); addNullToken(); return firstToken;
          }
        case 39: break;
        case 5: 
          { addToken(Token.ERROR_STRING_DOUBLE); addNullToken(); return firstToken;
          }
        case 40: break;
        case 23: 
          { addToken(Token.DATA_TYPE);
          }
        case 41: break;
        case 19: 
          { yybegin(YYINITIAL); addToken(start,zzStartRead+2-1, Token.COMMENT_MULTILINE);
          }
        case 42: break;
        case 13: 
          { addToken(Token.ERROR_CHAR);
          }
        case 43: break;
        case 24: 
          { addToken(Token.LITERAL_BOOLEAN);
          }
        case 44: break;
        case 14: 
          { addToken(Token.LITERAL_STRING_DOUBLE_QUOTE);
          }
        case 45: break;
        case 26: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_EOL); addHyperlinkToken(temp,zzMarkedPos-1, Token.COMMENT_EOL); start = zzMarkedPos;
          }
        case 46: break;
        case 25: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); addHyperlinkToken(temp,zzMarkedPos-1, Token.COMMENT_MULTILINE); start = zzMarkedPos;
          }
        case 47: break;
        case 12: 
          { addToken(Token.ERROR_NUMBER_FORMAT);
          }
        case 48: break;
        case 2: 
          { addToken(Token.LITERAL_NUMBER_DECIMAL_INT);
          }
        case 49: break;
        case 7: 
          { addToken(Token.OPERATOR);
          }
        case 50: break;
        case 9: 
          { 
          }
        case 51: break;
        case 10: 
          { addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
          }
        case 52: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
            case EOL_COMMENT: {
              addToken(start,zzStartRead-1, Token.COMMENT_EOL); addNullToken(); return firstToken;
            }
            case 187: break;
            case YYINITIAL: {
              addNullToken(); return firstToken;
            }
            case 188: break;
            case MLC: {
              addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
            }
            case 189: break;
            default:
            return null;
            }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
