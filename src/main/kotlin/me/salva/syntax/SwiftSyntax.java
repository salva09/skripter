/* The following code was generated by JFlex 1.4.1 on 11/28/20, 8:42 PM */

/*
 * Generated on 11/28/20, 8:42 PM
 */
package me.salva.syntax;

import java.io.*;
import javax.swing.text.Segment;

import org.fife.ui.rsyntaxtextarea.*;


/**
 * 
 */

public class SwiftSyntax extends AbstractJFlexCTokenMaker {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int EOL_COMMENT = 2;
  public static final int YYINITIAL = 0;
  public static final int MLC = 1;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\21\1\10\1\0\1\21\1\17\22\0\1\65\1\41\1\15"+
    "\1\20\1\1\1\45\1\43\1\7\2\42\1\23\1\44\1\37\1\27"+
    "\1\25\1\22\1\4\3\16\4\6\2\3\1\51\1\37\1\75\1\74"+
    "\1\76\1\41\1\40\1\53\1\72\1\5\1\70\1\5\1\73\2\1"+
    "\1\67\2\1\1\66\3\1\1\71\2\1\1\55\7\1\1\42\1\11"+
    "\1\42\1\77\1\2\1\0\1\33\1\14\1\57\1\60\1\26\1\32"+
    "\1\63\1\46\1\50\1\1\1\61\1\34\1\62\1\13\1\56\1\47"+
    "\1\1\1\31\1\35\1\30\1\12\1\64\1\52\1\24\1\54\1\1"+
    "\1\36\1\100\1\36\1\41\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\2\1\2\2\1\3\1\4\2\1\1\5\1\6"+
    "\2\7\2\1\1\7\6\1\1\10\3\7\12\1\1\6"+
    "\4\1\3\7\1\11\1\12\5\11\1\13\3\11\1\0"+
    "\1\14\1\0\2\14\1\3\1\15\1\0\1\3\2\1"+
    "\2\5\1\16\1\17\1\20\1\21\13\1\1\22\7\1"+
    "\2\22\12\1\1\0\4\1\1\23\11\0\1\21\1\0"+
    "\1\24\1\3\1\25\2\3\1\15\1\3\1\1\1\5"+
    "\1\26\1\5\41\1\10\0\1\27\3\1\11\0\1\3"+
    "\1\1\1\5\30\1\11\0\1\30\3\0\1\1\2\0"+
    "\1\31\2\0\1\32\1\0\1\3\1\5\1\1\1\22"+
    "\16\1\14\0\1\1\5\0\1\3\1\5\13\1\2\0"+
    "\1\30\1\0\1\30\7\0\5\1\12\0\2\1\6\0"+
    "\2\1\5\0\1\1\2\0\1\1\2\0\1\1\1\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[334];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\101\0\202\0\303\0\u0104\0\u0145\0\u0186\0\u01c7"+
    "\0\303\0\u0208\0\u0249\0\u028a\0\u02cb\0\u030c\0\u034d\0\u038e"+
    "\0\u03cf\0\u0410\0\u0451\0\u0492\0\u04d3\0\u0514\0\u0555\0\u0596"+
    "\0\303\0\303\0\u05d7\0\u0618\0\u0659\0\u069a\0\u06db\0\u071c"+
    "\0\u075d\0\u079e\0\u07df\0\u0820\0\u0861\0\u08a2\0\u08e3\0\u0924"+
    "\0\u0965\0\u09a6\0\u09e7\0\u0a28\0\u0a69\0\u0aaa\0\u0aeb\0\303"+
    "\0\u0b2c\0\u0b6d\0\u0bae\0\u0bef\0\u0c30\0\303\0\u0c71\0\u0cb2"+
    "\0\u0cf3\0\u0d34\0\u0d75\0\u038e\0\u0db6\0\u0df7\0\u0e38\0\303"+
    "\0\u0e79\0\u0eba\0\u0efb\0\u0f3c\0\u0f7d\0\u0fbe\0\303\0\303"+
    "\0\303\0\u0fff\0\u1040\0\u1081\0\u10c2\0\u1103\0\u1144\0\u1185"+
    "\0\u11c6\0\u1207\0\u1248\0\u1289\0\u12ca\0\u130b\0\u134c\0\u138d"+
    "\0\u13ce\0\u140f\0\u1450\0\u1491\0\u14d2\0\u1513\0\u0104\0\u1554"+
    "\0\u1595\0\u15d6\0\u1617\0\u1658\0\u1699\0\u16da\0\u171b\0\u175c"+
    "\0\u179d\0\u17de\0\u181f\0\u1860\0\u18a1\0\u18e2\0\303\0\u1923"+
    "\0\u1964\0\u19a5\0\u19e6\0\u1a27\0\u1a68\0\u1aa9\0\u1aea\0\u1b2b"+
    "\0\u1b6c\0\u1bad\0\u0df7\0\u1bee\0\303\0\u1c2f\0\u1c70\0\u0e79"+
    "\0\u1cb1\0\u1cf2\0\u1d33\0\303\0\u1d74\0\u1db5\0\u1df6\0\u1e37"+
    "\0\u1e78\0\u1eb9\0\u1efa\0\u1f3b\0\u1f7c\0\u1fbd\0\u1ffe\0\u203f"+
    "\0\u2080\0\u20c1\0\u2102\0\u2143\0\u2184\0\u21c5\0\u2206\0\u2247"+
    "\0\u2288\0\u22c9\0\u230a\0\u234b\0\u238c\0\u23cd\0\u240e\0\u244f"+
    "\0\u2490\0\u24d1\0\u2512\0\u2553\0\u2594\0\u25d5\0\u2616\0\u2657"+
    "\0\u2698\0\u26d9\0\u271a\0\u275b\0\u279c\0\u27dd\0\u0104\0\u281e"+
    "\0\u285f\0\u28a0\0\u28e1\0\u2922\0\u2963\0\u29a4\0\u29e5\0\u2a26"+
    "\0\u2a67\0\u2aa8\0\u2ae9\0\u2b2a\0\u2b6b\0\u2bac\0\u2bed\0\u2c2e"+
    "\0\u2c6f\0\u2cb0\0\u2cf1\0\u2d32\0\u2d73\0\u2db4\0\u2df5\0\u2e36"+
    "\0\u2e77\0\u2eb8\0\u2ef9\0\u2f3a\0\u2f7b\0\u2fbc\0\u2ffd\0\u303e"+
    "\0\u307f\0\u30c0\0\u3101\0\u3142\0\u3183\0\u31c4\0\u3205\0\u3246"+
    "\0\u3287\0\u32c8\0\u3309\0\u334a\0\u338b\0\u33cc\0\u340d\0\303"+
    "\0\u344e\0\u348f\0\u34d0\0\u3511\0\u3552\0\u3593\0\u35d4\0\u3615"+
    "\0\u3656\0\u3697\0\u36d8\0\u3719\0\u375a\0\u379b\0\u30c0\0\u37dc"+
    "\0\u381d\0\u385e\0\u389f\0\u38e0\0\u3921\0\u3962\0\u39a3\0\u39e4"+
    "\0\u3a25\0\u3a66\0\u3aa7\0\u3ae8\0\u3b29\0\u3b6a\0\u3bab\0\u3bec"+
    "\0\u3c2d\0\u3c6e\0\u3caf\0\u3cf0\0\u3d31\0\u3d72\0\u3db3\0\u3df4"+
    "\0\u3e35\0\u3e76\0\u3eb7\0\u35d4\0\u3ef8\0\u3697\0\u3f39\0\u3f7a"+
    "\0\u3fbb\0\u3ffc\0\u403d\0\u407e\0\u40bf\0\u4100\0\u4141\0\u4182"+
    "\0\u41c3\0\u4204\0\u4245\0\u4286\0\u42c7\0\u4308\0\u3b6a\0\u4349"+
    "\0\u438a\0\u43cb\0\u440c\0\u444d\0\u448e\0\u44cf\0\u4510\0\u4551"+
    "\0\u4592\0\u45d3\0\u4614\0\u4655\0\u4696\0\u46d7\0\u4718\0\u4759"+
    "\0\u479a\0\u47db\0\u481c\0\u485d\0\u489e\0\u48df\0\u4920\0\u4961"+
    "\0\u49a2\0\u49e3\0\u4a24\0\u4a65\0\u4aa6\0\u4ae7\0\u4b28\0\u4b69"+
    "\0\u4baa\0\u4beb\0\u4c2c\0\u4c6d\0\u4cae\0\u4cef\0\u4d30\0\u4d71"+
    "\0\u4db2\0\u4df3\0\u4e34\0\u4e75\0\u4eb6\0\u4ef7";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[334];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\2\5\1\6\1\7\1\5\1\6\1\10\1\11"+
    "\1\4\1\5\1\12\1\13\1\14\1\6\2\4\1\15"+
    "\1\16\1\17\1\5\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\2\4\1\32\1\31"+
    "\1\33\1\34\1\17\1\5\1\35\1\36\1\32\1\37"+
    "\1\40\1\5\1\41\1\42\1\43\1\44\2\5\1\45"+
    "\1\46\1\47\1\5\1\50\1\51\1\5\1\52\1\53"+
    "\1\17\1\54\1\55\1\32\1\56\10\57\1\60\12\57"+
    "\1\61\6\57\1\62\13\57\1\63\3\57\1\64\26\57"+
    "\10\65\1\66\21\65\1\67\13\65\1\70\3\65\1\71"+
    "\26\65\102\0\6\5\2\0\1\72\3\5\1\0\1\5"+
    "\5\0\1\5\1\0\1\5\1\0\6\5\10\0\3\5"+
    "\1\0\13\5\1\0\6\5\5\0\3\73\2\6\1\73"+
    "\1\6\2\0\4\73\1\0\1\6\1\0\1\73\3\0"+
    "\1\73\1\74\1\75\1\0\6\73\2\0\1\73\5\0"+
    "\3\73\1\0\13\73\1\0\6\73\5\0\3\73\2\6"+
    "\1\73\1\6\2\0\4\73\1\0\1\6\1\0\1\73"+
    "\3\0\1\76\1\74\1\75\1\0\6\73\2\0\1\73"+
    "\5\0\3\73\1\0\13\73\1\0\6\73\5\0\7\77"+
    "\1\100\1\101\1\102\67\77\1\0\6\5\2\0\1\72"+
    "\3\5\1\0\1\5\5\0\1\5\1\0\1\5\1\0"+
    "\6\5\10\0\2\5\1\103\1\0\13\5\1\0\6\5"+
    "\6\0\6\5\2\0\1\72\3\5\1\0\1\5\5\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\104\4\5\10\0"+
    "\3\5\1\0\13\5\1\0\6\5\5\0\10\14\1\105"+
    "\1\106\3\14\1\107\63\14\21\0\1\15\43\0\1\15"+
    "\35\0\1\110\1\111\50\0\1\32\100\0\1\32\7\0"+
    "\2\112\1\0\1\112\7\0\1\112\63\0\6\5\2\0"+
    "\1\72\1\5\1\113\1\5\1\0\1\5\5\0\1\114"+
    "\1\0\1\5\1\0\4\5\1\115\1\5\10\0\3\5"+
    "\1\0\13\5\1\0\6\5\34\0\1\32\44\0\1\32"+
    "\5\0\6\5\2\0\1\72\3\5\1\0\1\5\5\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\116\4\5\10\0"+
    "\1\117\2\5\1\0\2\5\1\120\10\5\1\0\6\5"+
    "\6\0\6\5\2\0\1\72\3\5\1\0\1\5\5\0"+
    "\1\5\1\0\1\121\1\0\6\5\10\0\3\5\1\0"+
    "\13\5\1\0\6\5\6\0\6\5\2\0\1\72\1\122"+
    "\2\5\1\0\1\5\5\0\1\5\1\0\1\5\1\0"+
    "\3\5\1\123\2\5\10\0\2\5\1\124\1\0\4\5"+
    "\1\125\6\5\1\0\6\5\6\0\6\5\2\0\1\72"+
    "\3\5\1\0\1\5\5\0\1\5\1\0\1\5\1\0"+
    "\5\5\1\126\10\0\3\5\1\0\13\5\1\0\6\5"+
    "\6\0\6\5\2\0\1\72\3\5\1\0\1\5\5\0"+
    "\1\5\1\0\1\127\1\0\6\5\10\0\3\5\1\0"+
    "\13\5\1\0\6\5\6\0\6\5\2\0\1\72\1\130"+
    "\2\5\1\0\1\5\5\0\1\5\1\0\1\131\1\0"+
    "\1\132\5\5\10\0\3\5\1\0\1\133\12\5\1\0"+
    "\6\5\50\0\1\32\101\0\1\32\27\0\1\32\5\0"+
    "\6\5\2\0\1\72\1\134\2\5\1\0\1\5\5\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\135\4\5\10\0"+
    "\3\5\1\0\13\5\1\0\6\5\6\0\6\5\2\0"+
    "\1\72\1\5\1\136\1\5\1\0\1\5\5\0\1\5"+
    "\1\0\1\5\1\0\2\5\1\137\2\5\1\137\10\0"+
    "\3\5\1\0\10\5\1\140\2\5\1\0\6\5\6\0"+
    "\6\5\2\0\1\72\3\5\1\0\1\5\5\0\1\5"+
    "\1\0\1\5\1\0\6\5\10\0\1\141\2\5\1\0"+
    "\13\5\1\0\6\5\6\0\6\5\2\0\1\72\1\5"+
    "\1\142\1\5\1\0\1\5\5\0\1\5\1\0\1\5"+
    "\1\0\6\5\10\0\3\5\1\0\13\5\1\0\6\5"+
    "\6\0\6\5\2\0\1\72\3\5\1\0\1\5\5\0"+
    "\1\5\1\0\1\131\1\0\1\143\5\5\10\0\3\5"+
    "\1\0\13\5\1\0\6\5\6\0\6\5\2\0\1\72"+
    "\3\5\1\0\1\5\5\0\1\5\1\0\1\5\1\0"+
    "\6\5\10\0\1\5\1\144\1\5\1\0\13\5\1\0"+
    "\6\5\6\0\6\5\2\0\1\72\3\5\1\0\1\5"+
    "\5\0\1\5\1\0\1\5\1\0\3\5\1\145\1\146"+
    "\1\5\10\0\3\5\1\0\4\5\1\147\6\5\1\0"+
    "\6\5\6\0\6\5\2\0\1\72\3\5\1\0\1\5"+
    "\5\0\1\5\1\0\1\150\1\0\6\5\10\0\3\5"+
    "\1\0\4\5\1\137\6\5\1\0\6\5\6\0\6\5"+
    "\2\0\1\72\1\151\2\5\1\0\1\5\5\0\1\5"+
    "\1\0\1\5\1\0\6\5\10\0\3\5\1\0\13\5"+
    "\1\0\6\5\6\0\6\5\2\0\1\72\3\5\1\0"+
    "\1\5\5\0\1\5\1\0\1\5\1\0\3\5\1\125"+
    "\2\5\10\0\3\5\1\0\13\5\1\0\6\5\25\0"+
    "\1\152\1\15\43\0\1\15\14\0\6\5\2\0\1\72"+
    "\1\5\1\153\1\5\1\0\1\5\5\0\1\5\1\0"+
    "\1\5\1\0\6\5\10\0\3\5\1\0\13\5\1\0"+
    "\6\5\6\0\6\5\2\0\1\72\3\5\1\0\1\5"+
    "\5\0\1\5\1\0\1\5\1\0\6\5\10\0\3\5"+
    "\1\0\4\5\1\154\6\5\1\0\6\5\6\0\6\5"+
    "\2\0\1\72\3\5\1\0\1\5\5\0\1\5\1\0"+
    "\1\5\1\0\6\5\10\0\3\5\1\0\4\5\1\155"+
    "\6\5\1\0\6\5\6\0\6\5\2\0\1\72\3\5"+
    "\1\0\1\5\5\0\1\5\1\0\1\5\1\0\4\5"+
    "\1\156\1\5\10\0\3\5\1\0\13\5\1\0\6\5"+
    "\102\0\1\17\101\0\1\17\102\0\1\32\10\57\1\0"+
    "\12\57\1\0\6\57\1\0\13\57\1\0\3\57\1\0"+
    "\26\57\22\0\1\157\106\0\1\160\17\0\1\161\60\0"+
    "\1\162\122\0\1\163\26\0\10\65\1\0\21\65\1\0"+
    "\13\65\1\0\3\65\1\0\26\65\30\0\1\164\17\0"+
    "\1\165\60\0\1\166\122\0\1\167\40\0\1\170\66\0"+
    "\7\73\2\0\4\73\1\0\1\73\1\0\1\73\3\0"+
    "\1\73\1\0\1\73\1\0\6\73\2\0\1\73\5\0"+
    "\3\73\1\0\13\73\1\0\6\73\5\0\3\73\2\171"+
    "\1\73\1\171\2\0\4\73\1\0\1\171\1\0\1\73"+
    "\3\0\1\73\1\0\1\73\1\172\6\73\2\0\1\73"+
    "\3\0\1\172\1\0\3\73\1\0\13\73\1\0\6\73"+
    "\5\0\3\73\4\173\2\0\3\73\1\173\1\0\1\173"+
    "\1\0\1\73\3\0\1\73\1\0\1\173\1\0\2\73"+
    "\2\173\2\73\2\0\1\73\5\0\3\73\1\0\1\73"+
    "\1\173\3\73\2\173\4\73\1\0\2\73\1\173\1\73"+
    "\2\173\5\0\7\174\1\175\1\0\70\174\7\0\1\175"+
    "\71\0\4\174\1\176\1\174\1\177\1\200\1\0\1\77"+
    "\1\201\3\77\1\176\11\174\3\77\46\174\1\0\6\5"+
    "\2\0\1\72\3\5\1\0\1\5\5\0\1\5\1\0"+
    "\1\5\1\0\4\5\1\137\1\5\10\0\3\5\1\0"+
    "\13\5\1\0\6\5\6\0\6\5\2\0\1\72\3\5"+
    "\1\0\1\5\5\0\1\5\1\0\1\202\1\0\6\5"+
    "\10\0\3\5\1\0\13\5\1\0\6\5\5\0\11\105"+
    "\1\203\3\105\1\204\67\105\1\14\1\105\2\14\1\0"+
    "\1\14\1\205\4\14\11\105\3\14\46\105\3\73\2\112"+
    "\1\73\1\112\2\0\4\73\1\0\1\112\1\0\1\73"+
    "\3\0\1\73\1\0\1\75\1\0\6\73\2\0\1\73"+
    "\5\0\3\73\1\0\13\73\1\0\6\73\6\0\6\5"+
    "\2\0\1\72\1\206\2\5\1\0\1\5\5\0\1\5"+
    "\1\0\1\5\1\0\6\5\10\0\3\5\1\0\13\5"+
    "\1\0\6\5\6\0\6\5\2\0\1\72\3\5\1\0"+
    "\1\5\5\0\1\5\1\0\1\5\1\0\1\207\5\5"+
    "\10\0\3\5\1\0\13\5\1\0\6\5\6\0\6\5"+
    "\2\0\1\72\3\5\1\0\1\5\5\0\1\5\1\0"+
    "\1\5\1\0\5\5\1\210\10\0\3\5\1\0\13\5"+
    "\1\0\6\5\6\0\6\5\2\0\1\72\1\210\2\5"+
    "\1\0\1\5\5\0\1\5\1\0\1\5\1\0\6\5"+
    "\10\0\3\5\1\0\2\5\1\137\10\5\1\0\6\5"+
    "\6\0\6\5\2\0\1\72\3\5\1\0\1\5\5\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\211\4\5\10\0"+
    "\3\5\1\0\13\5\1\0\6\5\6\0\6\5\2\0"+
    "\1\72\3\5\1\0\1\5\5\0\1\5\1\0\1\5"+
    "\1\0\6\5\10\0\1\5\1\212\1\5\1\0\13\5"+
    "\1\0\6\5\6\0\6\5\2\0\1\72\3\5\1\0"+
    "\1\5\5\0\1\5\1\0\1\5\1\0\1\213\5\5"+
    "\10\0\1\5\1\214\1\5\1\0\13\5\1\0\6\5"+
    "\6\0\6\5\2\0\1\72\1\5\1\215\1\5\1\0"+
    "\1\5\5\0\1\5\1\0\1\5\1\0\6\5\10\0"+
    "\3\5\1\0\13\5\1\0\6\5\6\0\6\5\2\0"+
    "\1\72\3\5\1\0\1\5\5\0\1\5\1\0\1\5"+
    "\1\0\4\5\1\216\1\5\10\0\3\5\1\0\13\5"+
    "\1\0\6\5\6\0\6\5\2\0\1\72\3\5\1\0"+
    "\1\5\5\0\1\5\1\0\1\5\1\0\4\5\1\217"+
    "\1\5\10\0\3\5\1\0\13\5\1\0\6\5\6\0"+
    "\6\5\2\0\1\72\3\5\1\0\1\5\5\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\137\4\5\10\0\3\5"+
    "\1\0\13\5\1\0\6\5\6\0\6\5\2\0\1\72"+
    "\3\5\1\0\1\5\5\0\1\5\1\0\1\5\1\0"+
    "\5\5\1\220\10\0\3\5\1\0\13\5\1\0\6\5"+
    "\6\0\6\5\2\0\1\72\3\5\1\0\1\5\5\0"+
    "\1\5\1\0\1\5\1\0\1\137\5\5\10\0\3\5"+
    "\1\0\13\5\1\0\6\5\6\0\6\5\2\0\1\72"+
    "\2\5\1\221\1\0\1\5\5\0\1\5\1\0\1\5"+
    "\1\0\6\5\10\0\1\5\1\222\1\5\1\0\13\5"+
    "\1\0\6\5\6\0\6\5\2\0\1\72\3\5\1\0"+
    "\1\5\5\0\1\5\1\0\1\5\1\0\4\5\1\223"+
    "\1\5\10\0\3\5\1\0\13\5\1\0\6\5\6\0"+
    "\6\5\2\0\1\72\3\5\1\0\1\5\5\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\224\1\5\1\225\2\5"+
    "\10\0\3\5\1\0\13\5\1\0\6\5\6\0\6\5"+
    "\2\0\1\72\3\5\1\0\1\5\5\0\1\5\1\0"+
    "\1\5\1\0\6\5\10\0\2\5\1\226\1\0\13\5"+
    "\1\0\6\5\6\0\6\5\2\0\1\72\2\5\1\227"+
    "\1\0\1\5\5\0\1\5\1\0\1\5\1\0\6\5"+
    "\10\0\3\5\1\0\13\5\1\0\6\5\6\0\6\5"+
    "\2\0\1\72\3\5\1\0\1\5\5\0\1\5\1\0"+
    "\1\5\1\0\6\5\10\0\2\5\1\230\1\0\4\5"+
    "\1\231\6\5\1\0\6\5\6\0\6\5\2\0\1\72"+
    "\3\5\1\0\1\5\5\0\1\5\1\0\1\5\1\0"+
    "\1\232\5\5\10\0\2\5\1\127\1\0\4\5\1\233"+
    "\6\5\1\0\6\5\6\0\6\5\2\0\1\72\3\5"+
    "\1\0\1\5\5\0\1\5\1\0\1\5\1\0\6\5"+
    "\10\0\1\5\1\234\1\5\1\0\13\5\1\0\6\5"+
    "\6\0\6\5\2\0\1\72\3\5\1\0\1\5\5\0"+
    "\1\5\1\0\1\235\1\0\6\5\10\0\2\5\1\236"+
    "\1\0\13\5\1\0\6\5\6\0\6\5\2\0\1\72"+
    "\3\5\1\0\1\5\5\0\1\5\1\0\1\5\1\0"+
    "\6\5\10\0\3\5\1\0\2\5\1\137\10\5\1\0"+
    "\6\5\6\0\6\5\2\0\1\72\3\5\1\0\1\5"+
    "\5\0\1\5\1\0\1\5\1\0\1\5\1\237\4\5"+
    "\10\0\3\5\1\0\13\5\1\0\6\5\6\0\6\5"+
    "\2\0\1\72\3\5\1\0\1\5\5\0\1\5\1\0"+
    "\1\240\1\0\6\5\10\0\3\5\1\0\13\5\1\0"+
    "\6\5\6\0\6\5\2\0\1\72\3\5\1\0\1\5"+
    "\5\0\1\5\1\0\1\5\1\0\1\241\4\5\1\210"+
    "\10\0\3\5\1\0\13\5\1\0\6\5\6\0\6\5"+
    "\2\0\1\72\3\5\1\0\1\5\5\0\1\5\1\0"+
    "\1\5\1\0\3\5\1\242\2\5\10\0\3\5\1\0"+
    "\13\5\1\0\6\5\6\0\6\5\2\0\1\72\1\5"+
    "\1\243\1\5\1\0\1\5\5\0\1\5\1\0\1\5"+
    "\1\0\6\5\10\0\3\5\1\0\13\5\1\0\6\5"+
    "\6\0\6\5\2\0\1\72\3\5\1\0\1\5\5\0"+
    "\1\5\1\0\1\5\1\0\2\5\1\244\3\5\10\0"+
    "\2\5\1\245\1\0\13\5\1\0\6\5\6\0\6\5"+
    "\2\0\1\72\3\5\1\0\1\5\5\0\1\5\1\0"+
    "\1\5\1\0\3\5\1\246\2\5\10\0\3\5\1\0"+
    "\13\5\1\0\6\5\33\0\1\247\3\0\1\250\1\251"+
    "\1\252\1\253\12\0\1\254\1\0\1\255\4\0\1\256"+
    "\22\0\6\5\2\0\1\72\3\5\1\0\1\5\5\0"+
    "\1\5\1\0\1\5\1\0\1\257\5\5\10\0\3\5"+
    "\1\0\13\5\1\0\6\5\6\0\6\5\2\0\1\72"+
    "\1\260\2\5\1\0\1\5\5\0\1\5\1\0\1\5"+
    "\1\0\6\5\10\0\3\5\1\0\13\5\1\0\6\5"+
    "\6\0\6\5\2\0\1\72\3\5\1\0\1\5\5\0"+
    "\1\5\1\0\1\5\1\0\6\5\10\0\3\5\1\0"+
    "\4\5\1\261\6\5\1\0\6\5\6\0\6\5\2\0"+
    "\1\72\3\5\1\0\1\5\5\0\1\5\1\0\1\5"+
    "\1\0\6\5\10\0\3\5\1\0\4\5\1\262\6\5"+
    "\1\0\6\5\54\0\1\263\65\0\1\264\74\0\1\265"+
    "\122\0\1\266\75\0\1\267\65\0\1\270\74\0\1\271"+
    "\122\0\1\272\31\0\4\273\5\0\1\273\1\0\1\273"+
    "\7\0\1\273\3\0\2\273\17\0\1\273\3\0\2\273"+
    "\7\0\1\273\1\0\2\273\5\0\3\73\2\171\1\73"+
    "\1\171\2\0\4\73\1\0\1\171\1\0\1\73\3\0"+
    "\1\73\1\0\1\73\1\0\6\73\2\0\1\73\5\0"+
    "\3\73\1\0\13\73\1\0\6\73\10\0\2\171\1\0"+
    "\1\171\7\0\1\171\62\0\7\174\1\100\1\0\74\174"+
    "\1\177\1\174\1\177\1\175\1\0\5\174\1\177\66\174"+
    "\1\77\1\174\1\77\1\175\1\0\5\174\1\77\65\174"+
    "\4\274\1\100\1\0\3\174\1\274\1\174\1\274\7\174"+
    "\1\274\3\174\2\274\17\174\1\274\3\174\2\274\7\174"+
    "\1\274\1\174\2\274\5\174\1\0\6\5\2\0\1\72"+
    "\3\5\1\0\1\5\5\0\1\5\1\0\1\5\1\0"+
    "\3\5\1\275\2\5\10\0\3\5\1\0\13\5\1\0"+
    "\6\5\5\0\10\105\1\0\73\105\4\276\2\105\1\203"+
    "\2\105\1\276\1\204\1\276\7\105\1\276\3\105\2\276"+
    "\17\105\1\276\3\105\2\276\7\105\1\276\1\105\2\276"+
    "\5\105\1\0\6\5\2\0\1\72\3\5\1\0\1\5"+
    "\5\0\1\5\1\0\1\5\1\0\6\5\10\0\3\5"+
    "\1\0\10\5\1\137\2\5\1\0\6\5\6\0\6\5"+
    "\2\0\1\72\3\5\1\0\1\5\5\0\1\5\1\0"+
    "\1\277\1\0\6\5\10\0\3\5\1\0\13\5\1\0"+
    "\6\5\6\0\6\5\2\0\1\72\3\5\1\0\1\5"+
    "\5\0\1\5\1\0\1\137\1\0\6\5\10\0\3\5"+
    "\1\0\13\5\1\0\6\5\6\0\6\5\2\0\1\72"+
    "\3\5\1\0\1\5\5\0\1\5\1\0\1\5\1\0"+
    "\6\5\10\0\3\5\1\0\4\5\1\300\6\5\1\0"+
    "\6\5\6\0\6\5\2\0\1\72\3\5\1\0\1\5"+
    "\5\0\1\5\1\0\1\301\1\0\6\5\10\0\3\5"+
    "\1\0\13\5\1\0\6\5\6\0\6\5\2\0\1\72"+
    "\1\302\2\5\1\0\1\5\5\0\1\5\1\0\1\5"+
    "\1\0\6\5\10\0\1\303\2\5\1\0\13\5\1\0"+
    "\6\5\6\0\6\5\2\0\1\72\3\5\1\0\1\5"+
    "\5\0\1\5\1\0\1\304\1\0\6\5\10\0\3\5"+
    "\1\0\13\5\1\0\6\5\6\0\6\5\2\0\1\72"+
    "\3\5\1\0\1\5\5\0\1\5\1\0\1\5\1\0"+
    "\6\5\10\0\3\5\1\0\5\5\1\137\5\5\1\0"+
    "\6\5\6\0\6\5\2\0\1\72\3\5\1\0\1\5"+
    "\5\0\1\5\1\0\1\5\1\0\4\5\1\305\1\210"+
    "\10\0\3\5\1\0\13\5\1\0\6\5\6\0\6\5"+
    "\2\0\1\72\3\5\1\0\1\5\5\0\1\5\1\0"+
    "\1\306\1\0\6\5\10\0\3\5\1\0\13\5\1\0"+
    "\6\5\6\0\6\5\2\0\1\72\3\5\1\0\1\5"+
    "\5\0\1\5\1\0\1\5\1\0\6\5\10\0\3\5"+
    "\1\0\4\5\1\307\6\5\1\0\6\5\6\0\6\5"+
    "\2\0\1\72\3\5\1\0\1\5\5\0\1\5\1\0"+
    "\1\5\1\0\5\5\1\310\10\0\3\5\1\0\13\5"+
    "\1\0\6\5\6\0\6\5\2\0\1\72\3\5\1\0"+
    "\1\5\5\0\1\5\1\0\1\125\1\0\6\5\10\0"+
    "\3\5\1\0\13\5\1\0\6\5\6\0\6\5\2\0"+
    "\1\72\3\5\1\0\1\5\5\0\1\5\1\0\1\5"+
    "\1\0\2\5\1\137\3\5\10\0\3\5\1\0\13\5"+
    "\1\0\6\5\6\0\6\5\2\0\1\72\1\311\2\5"+
    "\1\0\1\5\5\0\1\5\1\0\1\5\1\0\6\5"+
    "\10\0\3\5\1\0\13\5\1\0\6\5\6\0\6\5"+
    "\2\0\1\72\3\5\1\0\1\5\5\0\1\5\1\0"+
    "\1\5\1\0\1\312\5\5\10\0\3\5\1\0\13\5"+
    "\1\0\6\5\6\0\6\5\2\0\1\72\3\5\1\0"+
    "\1\5\5\0\1\5\1\0\1\5\1\0\1\241\5\5"+
    "\10\0\3\5\1\0\13\5\1\0\6\5\6\0\6\5"+
    "\2\0\1\72\3\5\1\0\1\5\5\0\1\5\1\0"+
    "\1\5\1\0\4\5\1\312\1\5\10\0\3\5\1\0"+
    "\13\5\1\0\6\5\6\0\6\5\2\0\1\72\3\5"+
    "\1\0\1\5\5\0\1\5\1\0\1\5\1\0\6\5"+
    "\10\0\3\5\1\0\12\5\1\313\1\0\6\5\6\0"+
    "\6\5\2\0\1\72\3\5\1\0\1\5\5\0\1\5"+
    "\1\0\1\5\1\0\1\314\5\5\10\0\3\5\1\0"+
    "\13\5\1\0\6\5\6\0\6\5\2\0\1\72\3\5"+
    "\1\0\1\5\5\0\1\5\1\0\1\315\1\0\6\5"+
    "\10\0\3\5\1\0\13\5\1\0\6\5\6\0\6\5"+
    "\2\0\1\72\1\127\2\5\1\0\1\5\5\0\1\5"+
    "\1\0\1\5\1\0\6\5\10\0\3\5\1\0\13\5"+
    "\1\0\6\5\6\0\6\5\2\0\1\72\3\5\1\0"+
    "\1\5\5\0\1\5\1\0\1\5\1\0\6\5\10\0"+
    "\3\5\1\0\4\5\1\316\6\5\1\0\6\5\6\0"+
    "\6\5\2\0\1\72\3\5\1\0\1\5\5\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\210\4\5\10\0\3\5"+
    "\1\0\13\5\1\0\6\5\6\0\6\5\2\0\1\72"+
    "\3\5\1\0\1\5\5\0\1\5\1\0\1\5\1\0"+
    "\4\5\1\210\1\5\10\0\3\5\1\0\13\5\1\0"+
    "\6\5\6\0\6\5\2\0\1\72\3\5\1\0\1\5"+
    "\5\0\1\5\1\0\1\5\1\0\6\5\10\0\2\5"+
    "\1\317\1\0\13\5\1\0\6\5\6\0\6\5\2\0"+
    "\1\72\1\5\1\137\1\5\1\0\1\5\5\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\320\4\5\10\0\3\5"+
    "\1\0\13\5\1\0\6\5\6\0\6\5\2\0\1\72"+
    "\3\5\1\0\1\5\5\0\1\5\1\0\1\5\1\0"+
    "\6\5\10\0\3\5\1\0\5\5\1\321\5\5\1\0"+
    "\6\5\6\0\6\5\2\0\1\72\3\5\1\0\1\5"+
    "\5\0\1\5\1\0\1\5\1\0\5\5\1\322\10\0"+
    "\3\5\1\0\13\5\1\0\6\5\6\0\6\5\2\0"+
    "\1\72\3\5\1\0\1\5\5\0\1\5\1\0\1\5"+
    "\1\0\1\323\5\5\10\0\3\5\1\0\13\5\1\0"+
    "\6\5\6\0\6\5\2\0\1\72\3\5\1\0\1\5"+
    "\5\0\1\5\1\0\1\125\1\0\3\5\1\324\2\5"+
    "\10\0\3\5\1\0\13\5\1\0\6\5\6\0\6\5"+
    "\2\0\1\72\1\5\1\325\1\5\1\0\1\5\5\0"+
    "\1\5\1\0\1\5\1\0\6\5\10\0\3\5\1\0"+
    "\13\5\1\0\6\5\6\0\6\5\2\0\1\72\3\5"+
    "\1\0\1\5\5\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\326\4\5\10\0\3\5\1\0\13\5\1\0\6\5"+
    "\20\0\1\327\15\0\1\330\2\0\1\331\56\0\1\332"+
    "\35\0\1\333\114\0\1\334\64\0\1\335\56\0\1\336"+
    "\27\0\1\337\54\0\1\340\27\0\1\341\51\0\1\342"+
    "\123\0\1\343\23\0\6\5\2\0\1\72\2\5\1\344"+
    "\1\0\1\5\5\0\1\5\1\0\1\5\1\0\6\5"+
    "\10\0\3\5\1\0\13\5\1\0\6\5\6\0\6\5"+
    "\2\0\1\72\3\5\1\0\1\5\5\0\1\5\1\0"+
    "\1\5\1\0\4\5\1\257\1\5\10\0\3\5\1\0"+
    "\13\5\1\0\6\5\6\0\6\5\2\0\1\72\3\5"+
    "\1\0\1\5\5\0\1\5\1\0\1\5\1\0\3\5"+
    "\1\153\2\5\10\0\3\5\1\0\13\5\1\0\6\5"+
    "\56\0\1\345\55\0\1\263\121\0\1\346\56\0\1\347"+
    "\124\0\1\350\55\0\1\267\121\0\1\351\56\0\1\352"+
    "\56\0\4\353\5\0\1\353\1\0\1\353\7\0\1\353"+
    "\3\0\2\353\17\0\1\353\3\0\2\353\7\0\1\353"+
    "\1\0\2\353\5\0\3\174\4\354\1\100\1\0\3\174"+
    "\1\354\1\174\1\354\7\174\1\354\3\174\2\354\17\174"+
    "\1\354\3\174\2\354\7\174\1\354\1\174\2\354\5\174"+
    "\1\0\6\5\2\0\1\72\3\5\1\0\1\5\5\0"+
    "\1\5\1\0\1\5\1\0\6\5\10\0\3\5\1\0"+
    "\7\5\1\137\3\5\1\0\6\5\5\0\3\105\4\355"+
    "\2\105\1\203\2\105\1\355\1\204\1\355\7\105\1\355"+
    "\3\105\2\355\17\105\1\355\3\105\2\355\7\105\1\355"+
    "\1\105\2\355\5\105\1\0\6\5\2\0\1\72\1\5"+
    "\1\356\1\5\1\0\1\5\5\0\1\5\1\0\1\5"+
    "\1\0\6\5\10\0\3\5\1\0\13\5\1\0\6\5"+
    "\6\0\6\5\2\0\1\72\3\5\1\0\1\5\5\0"+
    "\1\5\1\0\1\5\1\0\6\5\10\0\3\5\1\0"+
    "\1\357\12\5\1\0\6\5\6\0\6\5\2\0\1\72"+
    "\3\5\1\0\1\5\5\0\1\5\1\0\1\5\1\0"+
    "\3\5\1\360\2\5\10\0\3\5\1\0\13\5\1\0"+
    "\6\5\6\0\6\5\2\0\1\72\3\5\1\0\1\5"+
    "\5\0\1\5\1\0\1\5\1\0\1\5\1\361\4\5"+
    "\10\0\3\5\1\0\13\5\1\0\6\5\6\0\6\5"+
    "\2\0\1\72\3\5\1\0\1\5\5\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\362\4\5\10\0\3\5\1\0"+
    "\13\5\1\0\6\5\6\0\6\5\2\0\1\72\3\5"+
    "\1\0\1\5\5\0\1\5\1\0\1\5\1\0\3\5"+
    "\1\127\2\5\10\0\3\5\1\0\13\5\1\0\6\5"+
    "\6\0\6\5\2\0\1\72\3\5\1\0\1\5\5\0"+
    "\1\5\1\0\1\5\1\0\1\363\5\5\10\0\3\5"+
    "\1\0\13\5\1\0\6\5\6\0\6\5\2\0\1\72"+
    "\3\5\1\0\1\5\5\0\1\5\1\0\1\5\1\0"+
    "\6\5\10\0\1\5\1\364\1\5\1\0\13\5\1\0"+
    "\6\5\6\0\6\5\2\0\1\72\3\5\1\0\1\5"+
    "\5\0\1\5\1\0\1\5\1\0\6\5\10\0\3\5"+
    "\1\0\5\5\1\365\5\5\1\0\6\5\6\0\6\5"+
    "\2\0\1\72\3\5\1\0\1\5\5\0\1\5\1\0"+
    "\1\5\1\0\6\5\10\0\3\5\1\0\5\5\1\366"+
    "\5\5\1\0\6\5\6\0\6\5\2\0\1\72\3\5"+
    "\1\0\1\5\5\0\1\5\1\0\1\5\1\0\6\5"+
    "\10\0\3\5\1\0\5\5\1\127\5\5\1\0\6\5"+
    "\6\0\6\5\2\0\1\72\3\5\1\0\1\5\5\0"+
    "\1\5\1\0\1\5\1\0\6\5\10\0\2\5\1\215"+
    "\1\0\13\5\1\0\6\5\6\0\6\5\2\0\1\72"+
    "\3\5\1\0\1\5\5\0\1\5\1\0\1\5\1\0"+
    "\3\5\1\367\2\5\10\0\3\5\1\0\13\5\1\0"+
    "\6\5\6\0\6\5\2\0\1\72\3\5\1\0\1\5"+
    "\5\0\1\5\1\0\1\5\1\0\6\5\10\0\3\5"+
    "\1\0\4\5\1\370\6\5\1\0\6\5\6\0\6\5"+
    "\2\0\1\72\3\5\1\0\1\5\5\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\371\4\5\10\0\3\5\1\0"+
    "\13\5\1\0\6\5\6\0\6\5\2\0\1\72\3\5"+
    "\1\0\1\5\5\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\127\4\5\10\0\3\5\1\0\13\5\1\0\6\5"+
    "\6\0\6\5\2\0\1\72\1\5\1\372\1\5\1\0"+
    "\1\5\5\0\1\5\1\0\1\5\1\0\6\5\10\0"+
    "\3\5\1\0\13\5\1\0\6\5\6\0\6\5\2\0"+
    "\1\72\3\5\1\0\1\5\5\0\1\5\1\0\1\5"+
    "\1\0\3\5\1\373\2\5\10\0\3\5\1\0\13\5"+
    "\1\0\6\5\6\0\6\5\2\0\1\72\3\5\1\0"+
    "\1\5\5\0\1\5\1\0\1\5\1\0\6\5\10\0"+
    "\1\137\2\5\1\0\13\5\1\0\6\5\6\0\6\5"+
    "\2\0\1\72\3\5\1\0\1\5\5\0\1\5\1\0"+
    "\1\5\1\0\5\5\1\137\10\0\3\5\1\0\13\5"+
    "\1\0\6\5\6\0\6\5\2\0\1\72\3\5\1\0"+
    "\1\5\5\0\1\5\1\0\1\5\1\0\6\5\10\0"+
    "\2\5\1\374\1\0\13\5\1\0\6\5\6\0\6\5"+
    "\2\0\1\72\1\375\2\5\1\0\1\5\5\0\1\5"+
    "\1\0\1\5\1\0\6\5\10\0\3\5\1\0\13\5"+
    "\1\0\6\5\6\0\6\5\2\0\1\72\3\5\1\0"+
    "\1\5\5\0\1\5\1\0\1\5\1\0\6\5\10\0"+
    "\2\5\1\127\1\0\13\5\1\0\6\5\6\0\6\5"+
    "\2\0\1\72\3\5\1\0\1\5\5\0\1\5\1\0"+
    "\1\5\1\0\6\5\10\0\3\5\1\0\6\5\1\137"+
    "\4\5\1\0\6\5\65\0\1\376\51\0\1\377\104\0"+
    "\1\u0100\56\0\1\u0101\121\0\1\u0102\77\0\1\u0103\60\0"+
    "\1\u0104\121\0\1\u0105\56\0\1\u0106\121\0\1\u0107\76\0"+
    "\1\u0108\103\0\1\u0109\45\0\6\5\2\0\1\72\3\5"+
    "\1\0\1\5\5\0\1\5\1\0\1\5\1\0\4\5"+
    "\1\u010a\1\5\10\0\3\5\1\0\13\5\1\0\6\5"+
    "\27\0\1\u010b\113\0\1\263\13\0\1\345\30\0\1\347"+
    "\1\u010c\4\347\1\u010c\2\0\3\347\1\0\1\347\1\0"+
    "\1\u010c\1\0\1\347\1\u010c\1\347\1\u010c\1\347\1\u010c"+
    "\6\347\1\0\7\u010c\3\347\1\u010c\13\347\1\0\6\347"+
    "\1\u010c\26\0\1\u010d\113\0\1\267\13\0\1\350\30\0"+
    "\1\352\1\u010e\4\352\1\u010e\2\0\3\352\1\0\1\352"+
    "\1\0\1\u010e\1\0\1\352\1\u010e\1\352\1\u010e\1\352"+
    "\1\u010e\6\352\1\0\7\u010e\3\352\1\u010e\13\352\1\0"+
    "\6\352\1\u010e\7\0\4\u010f\5\0\1\u010f\1\0\1\u010f"+
    "\7\0\1\u010f\3\0\2\u010f\17\0\1\u010f\3\0\2\u010f"+
    "\7\0\1\u010f\1\0\2\u010f\5\0\3\174\4\u0110\1\100"+
    "\1\0\3\174\1\u0110\1\174\1\u0110\7\174\1\u0110\3\174"+
    "\2\u0110\17\174\1\u0110\3\174\2\u0110\7\174\1\u0110\1\174"+
    "\2\u0110\5\174\3\105\4\u0111\2\105\1\203\2\105\1\u0111"+
    "\1\204\1\u0111\7\105\1\u0111\3\105\2\u0111\17\105\1\u0111"+
    "\3\105\2\u0111\7\105\1\u0111\1\105\2\u0111\5\105\1\0"+
    "\6\5\2\0\1\72\3\5\1\0\1\5\5\0\1\5"+
    "\1\0\1\5\1\0\5\5\1\u0112\10\0\3\5\1\0"+
    "\13\5\1\0\6\5\6\0\6\5\2\0\1\72\3\5"+
    "\1\0\1\5\5\0\1\5\1\0\1\5\1\0\4\5"+
    "\1\u0113\1\5\10\0\3\5\1\0\13\5\1\0\6\5"+
    "\6\0\6\5\2\0\1\72\1\5\1\137\1\5\1\0"+
    "\1\5\5\0\1\5\1\0\1\5\1\0\6\5\10\0"+
    "\3\5\1\0\13\5\1\0\6\5\6\0\6\5\2\0"+
    "\1\72\3\5\1\0\1\5\5\0\1\5\1\0\1\5"+
    "\1\0\6\5\10\0\3\5\1\0\4\5\1\u0114\6\5"+
    "\1\0\6\5\6\0\6\5\2\0\1\72\3\5\1\0"+
    "\1\5\5\0\1\5\1\0\1\5\1\0\6\5\10\0"+
    "\1\u0115\2\5\1\0\13\5\1\0\6\5\6\0\6\5"+
    "\2\0\1\72\3\5\1\0\1\5\5\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\u0116\4\5\10\0\3\5\1\0"+
    "\13\5\1\0\6\5\6\0\6\5\2\0\1\72\3\5"+
    "\1\0\1\5\5\0\1\5\1\0\1\5\1\0\6\5"+
    "\10\0\2\5\1\u0117\1\0\13\5\1\0\6\5\6\0"+
    "\6\5\2\0\1\72\3\5\1\0\1\5\5\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\u0118\4\5\10\0\3\5"+
    "\1\0\13\5\1\0\6\5\6\0\6\5\2\0\1\72"+
    "\3\5\1\0\1\5\5\0\1\5\1\0\1\5\1\0"+
    "\1\210\5\5\10\0\3\5\1\0\13\5\1\0\6\5"+
    "\6\0\6\5\2\0\1\72\3\5\1\0\1\5\5\0"+
    "\1\5\1\0\1\5\1\0\6\5\10\0\3\5\1\0"+
    "\5\5\1\u0119\5\5\1\0\6\5\6\0\6\5\2\0"+
    "\1\72\1\5\1\u011a\1\5\1\0\1\5\5\0\1\5"+
    "\1\0\1\5\1\0\6\5\10\0\3\5\1\0\13\5"+
    "\1\0\6\5\6\0\6\5\2\0\1\72\3\5\1\0"+
    "\1\5\5\0\1\5\1\0\1\5\1\0\6\5\10\0"+
    "\3\5\1\0\11\5\1\257\1\5\1\0\6\5\6\0"+
    "\6\5\2\0\1\72\3\5\1\0\1\5\5\0\1\5"+
    "\1\0\1\5\1\0\1\u011b\5\5\10\0\3\5\1\0"+
    "\13\5\1\0\6\5\6\0\6\5\2\0\1\72\1\5"+
    "\1\u011c\1\5\1\0\1\5\5\0\1\5\1\0\1\5"+
    "\1\0\6\5\10\0\3\5\1\0\13\5\1\0\6\5"+
    "\6\0\6\5\2\0\1\72\3\5\1\0\1\5\5\0"+
    "\1\5\1\0\1\5\1\0\4\5\1\127\1\5\10\0"+
    "\3\5\1\0\13\5\1\0\6\5\55\0\1\u011d\106\0"+
    "\1\u011e\50\0\1\u011f\131\0\1\u0120\47\0\1\u0121\122\0"+
    "\1\u0122\56\0\1\340\100\0\1\u0123\103\0\1\u0124\132\0"+
    "\1\u0125\30\0\1\u0126\77\0\1\u0127\43\0\1\u0128\23\0"+
    "\6\5\2\0\1\72\3\5\1\0\1\5\5\0\1\5"+
    "\1\0\1\257\1\0\6\5\10\0\3\5\1\0\13\5"+
    "\1\0\6\5\27\0\1\347\100\0\1\352\61\0\4\5"+
    "\5\0\1\5\1\0\1\5\7\0\1\5\3\0\2\5"+
    "\17\0\1\5\3\0\2\5\7\0\1\5\1\0\2\5"+
    "\5\0\3\174\4\77\1\100\1\0\3\174\1\77\1\174"+
    "\1\77\7\174\1\77\3\174\2\77\17\174\1\77\3\174"+
    "\2\77\7\174\1\77\1\174\2\77\5\174\3\105\4\14"+
    "\2\105\1\203\2\105\1\14\1\204\1\14\7\105\1\14"+
    "\3\105\2\14\17\105\1\14\3\105\2\14\7\105\1\14"+
    "\1\105\2\14\5\105\1\0\6\5\2\0\1\72\3\5"+
    "\1\0\1\5\5\0\1\5\1\0\1\5\1\0\6\5"+
    "\10\0\2\5\1\u0129\1\0\13\5\1\0\6\5\6\0"+
    "\6\5\2\0\1\72\3\5\1\0\1\5\5\0\1\5"+
    "\1\0\1\5\1\0\6\5\10\0\2\5\1\u012a\1\0"+
    "\13\5\1\0\6\5\6\0\6\5\2\0\1\72\3\5"+
    "\1\0\1\5\5\0\1\5\1\0\1\5\1\0\6\5"+
    "\10\0\3\5\1\0\1\322\12\5\1\0\6\5\6\0"+
    "\6\5\2\0\1\72\3\5\1\0\1\5\5\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\u012b\4\5\10\0\3\5"+
    "\1\0\13\5\1\0\6\5\6\0\6\5\2\0\1\72"+
    "\3\5\1\0\1\5\5\0\1\5\1\0\1\5\1\0"+
    "\6\5\10\0\2\5\1\230\1\0\13\5\1\0\6\5"+
    "\6\0\6\5\2\0\1\72\3\5\1\0\1\5\5\0"+
    "\1\5\1\0\1\5\1\0\3\5\1\u012c\2\5\10\0"+
    "\3\5\1\0\13\5\1\0\6\5\6\0\6\5\2\0"+
    "\1\72\3\5\1\0\1\5\5\0\1\5\1\0\1\5"+
    "\1\0\6\5\10\0\2\5\1\u012d\1\0\13\5\1\0"+
    "\6\5\6\0\6\5\2\0\1\72\3\5\1\0\1\5"+
    "\5\0\1\5\1\0\1\5\1\0\6\5\10\0\3\5"+
    "\1\0\4\5\1\103\6\5\1\0\6\5\6\0\6\5"+
    "\2\0\1\72\3\5\1\0\1\5\5\0\1\5\1\0"+
    "\1\5\1\0\3\5\1\103\2\5\10\0\3\5\1\0"+
    "\13\5\1\0\6\5\6\0\6\5\2\0\1\72\3\5"+
    "\1\0\1\5\5\0\1\5\1\0\1\5\1\0\6\5"+
    "\10\0\3\5\1\0\4\5\1\125\6\5\1\0\6\5"+
    "\6\0\6\5\2\0\1\72\1\210\2\5\1\0\1\5"+
    "\5\0\1\5\1\0\1\5\1\0\6\5\10\0\3\5"+
    "\1\0\13\5\1\0\6\5\37\0\1\340\77\0\1\340"+
    "\77\0\1\u012e\136\0\1\u012f\1\u0130\1\0\1\u0131\43\0"+
    "\1\u0132\123\0\1\u0133\100\0\1\u0134\47\0\1\u0135\122\0"+
    "\1\u0136\112\0\1\u0137\47\0\1\u0135\50\0\6\5\2\0"+
    "\1\72\3\5\1\0\1\5\5\0\1\5\1\0\1\5"+
    "\1\0\6\5\10\0\3\5\1\0\4\5\1\361\6\5"+
    "\1\0\6\5\6\0\6\5\2\0\1\72\3\5\1\0"+
    "\1\5\5\0\1\5\1\0\1\5\1\0\3\5\1\322"+
    "\2\5\10\0\3\5\1\0\13\5\1\0\6\5\6\0"+
    "\6\5\2\0\1\72\3\5\1\0\1\5\5\0\1\5"+
    "\1\0\1\5\1\0\6\5\10\0\3\5\1\0\4\5"+
    "\1\u0138\6\5\1\0\6\5\6\0\6\5\2\0\1\72"+
    "\3\5\1\0\1\5\5\0\1\5\1\0\1\5\1\0"+
    "\1\u0139\5\5\10\0\3\5\1\0\13\5\1\0\6\5"+
    "\6\0\6\5\2\0\1\72\3\5\1\0\1\5\5\0"+
    "\1\5\1\0\1\5\1\0\6\5\10\0\1\5\1\127"+
    "\1\5\1\0\13\5\1\0\6\5\55\0\1\u013a\100\0"+
    "\1\u013b\120\0\1\340\43\0\1\u013c\100\0\1\u013d\75\0"+
    "\1\377\76\0\1\u013e\140\0\1\u012f\25\0\1\u013f\100\0"+
    "\1\340\66\0\6\5\2\0\1\72\1\u0140\2\5\1\0"+
    "\1\5\5\0\1\5\1\0\1\5\1\0\6\5\10\0"+
    "\3\5\1\0\13\5\1\0\6\5\6\0\6\5\2\0"+
    "\1\72\3\5\1\0\1\5\5\0\1\5\1\0\1\u0141"+
    "\1\0\6\5\10\0\3\5\1\0\13\5\1\0\6\5"+
    "\63\0\1\u0137\52\0\1\u0142\100\0\1\u0143\64\0\1\u0144"+
    "\152\0\1\u0145\75\0\1\u0146\16\0\6\5\2\0\1\72"+
    "\3\5\1\0\1\5\5\0\1\5\1\0\1\5\1\0"+
    "\6\5\10\0\3\5\1\0\11\5\1\321\1\5\1\0"+
    "\6\5\6\0\6\5\2\0\1\72\3\5\1\0\1\5"+
    "\5\0\1\5\1\0\1\5\1\0\6\5\10\0\3\5"+
    "\1\0\6\5\1\u0147\4\5\1\0\6\5\33\0\1\u0148"+
    "\120\0\1\340\66\0\1\u0104\122\0\1\u0149\107\0\1\340"+
    "\14\0\6\5\2\0\1\72\3\5\1\0\1\5\5\0"+
    "\1\5\1\0\1\5\1\0\1\u014a\5\5\10\0\3\5"+
    "\1\0\13\5\1\0\6\5\36\0\1\u014b\126\0\1\u014c"+
    "\22\0\6\5\2\0\1\72\3\5\1\0\1\5\5\0"+
    "\1\5\1\0\1\5\1\0\6\5\10\0\3\5\1\0"+
    "\2\5\1\u014d\10\5\1\0\6\5\40\0\1\u014e\100\0"+
    "\1\u0120\46\0\6\5\2\0\1\72\3\5\1\0\1\5"+
    "\5\0\1\5\1\0\1\5\1\0\6\5\10\0\1\5"+
    "\1\210\1\5\1\0\13\5\1\0\6\5\41\0\1\340"+
    "\44\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[20280];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\4\1\1\11\17\1\2\11\25\1\1\11"+
    "\5\1\1\11\3\1\1\0\1\1\1\0\3\1\1\11"+
    "\1\0\5\1\3\11\40\1\1\0\4\1\1\11\11\0"+
    "\1\1\1\0\2\1\1\11\6\1\1\11\42\1\10\0"+
    "\4\1\11\0\33\1\11\0\1\11\3\0\1\1\2\0"+
    "\1\1\2\0\1\1\1\0\22\1\14\0\1\1\5\0"+
    "\15\1\2\0\1\1\1\0\1\1\7\0\5\1\12\0"+
    "\2\1\6\0\2\1\5\0\1\1\2\0\1\1\2\0"+
    "\1\1\1\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[334];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */


	/**
	 * Constructor.  This must be here because JFlex does not generate a
	 * no-parameter constructor.
	 */
	public SwiftSyntax() {
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 * @see #addToken(int, int, int)
	 */
	private void addHyperlinkToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so, true);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 */
	private void addToken(int tokenType) {
		addToken(zzStartRead, zzMarkedPos-1, tokenType);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 * @see #addHyperlinkToken(int, int, int)
	 */
	private void addToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so, false);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param array The character array.
	 * @param start The starting offset in the array.
	 * @param end The ending offset in the array.
	 * @param tokenType The token's type.
	 * @param startOffset The offset in the document at which this token
	 *        occurs.
	 * @param hyperlink Whether this token is a hyperlink.
	 */
	public void addToken(char[] array, int start, int end, int tokenType,
						int startOffset, boolean hyperlink) {
		super.addToken(array, start,end, tokenType, startOffset, hyperlink);
		zzStartRead = zzMarkedPos;
	}


	/**
	 * {@inheritDoc}
	 */
	public String[] getLineCommentStartAndEnd(int languageIndex) {
		return new String[] { "//", null };
	}


	/**
	 * Returns the first token in the linked list of tokens generated
	 * from <code>text</code>.  This method must be implemented by
	 * subclasses so they can correctly implement syntax highlighting.
	 *
	 * @param text The text from which to get tokens.
	 * @param initialTokenType The token type we should start with.
	 * @param startOffset The offset into the document at which
	 *        <code>text</code> starts.
	 * @return The first <code>Token</code> in a linked list representing
	 *         the syntax highlighted text.
	 */
	public Token getTokenList(Segment text, int initialTokenType, int startOffset) {

		resetTokenList();
		this.offsetShift = -text.offset + startOffset;

		// Start off in the proper state.
		int state = Token.NULL;
		switch (initialTokenType) {
						case Token.COMMENT_MULTILINE:
				state = MLC;
				start = text.offset;
				break;

			/* No documentation comments */
			default:
				state = Token.NULL;
		}

		s = text;
		try {
			yyreset(zzReader);
			yybegin(state);
			return yylex();
		} catch (IOException ioe) {
			ioe.printStackTrace();
			return new TokenImpl();
		}

	}


	/**
	 * Refills the input buffer.
	 *
	 * @return      <code>true</code> if EOF was reached, otherwise
	 *              <code>false</code>.
	 */
	private boolean zzRefill() {
		return zzCurrentPos>=s.offset+s.count;
	}


	/**
	 * Resets the scanner to read from a new input stream.
	 * Does not close the old reader.
	 *
	 * All internal variables are reset, the old input stream 
	 * <b>cannot</b> be reused (internal buffer is discarded and lost).
	 * Lexical state is set to <tt>YY_INITIAL</tt>.
	 *
	 * @param reader   the new input stream 
	 */
	public final void yyreset(Reader reader) {
		// 's' has been updated.
		zzBuffer = s.array;
		/*
		 * We replaced the line below with the two below it because zzRefill
		 * no longer "refills" the buffer (since the way we do it, it's always
		 * "full" the first time through, since it points to the segment's
		 * array).  So, we assign zzEndRead here.
		 */
		//zzStartRead = zzEndRead = s.offset;
		zzStartRead = s.offset;
		zzEndRead = zzStartRead + s.count - 1;
		zzCurrentPos = zzMarkedPos = zzPushbackPos = s.offset;
		zzLexicalState = YYINITIAL;
		zzReader = reader;
		zzAtBOL  = true;
		zzAtEOF  = false;
	}




  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public SwiftSyntax(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public SwiftSyntax(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 170) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 4: 
          { addNullToken(); return firstToken;
          }
        case 27: break;
        case 21: 
          { addToken(Token.LITERAL_CHAR);
          }
        case 28: break;
        case 16: 
          { start = zzMarkedPos-2; yybegin(MLC);
          }
        case 29: break;
        case 6: 
          { addToken(Token.WHITESPACE);
          }
        case 30: break;
        case 20: 
          { addToken(Token.LITERAL_NUMBER_HEXADECIMAL);
          }
        case 31: break;
        case 22: 
          { addToken(Token.ERROR_STRING_DOUBLE);
          }
        case 32: break;
        case 17: 
          { addToken(Token.LITERAL_NUMBER_FLOAT);
          }
        case 33: break;
        case 18: 
          { addToken(Token.RESERVED_WORD);
          }
        case 34: break;
        case 8: 
          { addToken(Token.SEPARATOR);
          }
        case 35: break;
        case 1: 
          { addToken(Token.IDENTIFIER);
          }
        case 36: break;
        case 11: 
          { addToken(start,zzStartRead-1, Token.COMMENT_EOL); addNullToken(); return firstToken;
          }
        case 37: break;
        case 15: 
          { start = zzMarkedPos-2; yybegin(EOL_COMMENT);
          }
        case 38: break;
        case 3: 
          { addToken(Token.ERROR_CHAR); addNullToken(); return firstToken;
          }
        case 39: break;
        case 5: 
          { addToken(Token.ERROR_STRING_DOUBLE); addNullToken(); return firstToken;
          }
        case 40: break;
        case 23: 
          { addToken(Token.DATA_TYPE);
          }
        case 41: break;
        case 19: 
          { yybegin(YYINITIAL); addToken(start,zzStartRead+2-1, Token.COMMENT_MULTILINE);
          }
        case 42: break;
        case 13: 
          { addToken(Token.ERROR_CHAR);
          }
        case 43: break;
        case 14: 
          { addToken(Token.LITERAL_STRING_DOUBLE_QUOTE);
          }
        case 44: break;
        case 26: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_EOL); addHyperlinkToken(temp,zzMarkedPos-1, Token.COMMENT_EOL); start = zzMarkedPos;
          }
        case 45: break;
        case 25: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); addHyperlinkToken(temp,zzMarkedPos-1, Token.COMMENT_MULTILINE); start = zzMarkedPos;
          }
        case 46: break;
        case 24: 
          { addToken(Token.RESERVED_WORD_2);
          }
        case 47: break;
        case 12: 
          { addToken(Token.ERROR_NUMBER_FORMAT);
          }
        case 48: break;
        case 2: 
          { addToken(Token.LITERAL_NUMBER_DECIMAL_INT);
          }
        case 49: break;
        case 7: 
          { addToken(Token.OPERATOR);
          }
        case 50: break;
        case 9: 
          { 
          }
        case 51: break;
        case 10: 
          { addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
          }
        case 52: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
            case EOL_COMMENT: {
              addToken(start,zzStartRead-1, Token.COMMENT_EOL); addNullToken(); return firstToken;
            }
            case 335: break;
            case YYINITIAL: {
              addNullToken(); return firstToken;
            }
            case 336: break;
            case MLC: {
              addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
            }
            case 337: break;
            default:
            return null;
            }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
